<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Buana Coding</title><link>https://www.buanacoding.com/</link><description>Recent content on Buana Coding</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 26 Oct 2025 14:00:00 +0700</lastBuildDate><atom:link href="https://www.buanacoding.com/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Automate Tasks with Cron Jobs and Shell Scripts on Linux</title><link>https://www.buanacoding.com/2025/10/how-to-automate-tasks-cron-jobs-shell-scripts-linux.html</link><pubDate>Sun, 26 Oct 2025 14:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-automate-tasks-cron-jobs-shell-scripts-linux.html</guid><description>&lt;p&gt;Automation separates beginners from experienced system administrators. Instead of manually running backups, monitoring logs, or cleaning temporary files, you write scripts once and let cron run them automatically.&lt;/p&gt;
&lt;p&gt;Cron handles time-based scheduling. Shell scripts do the actual work. Combined, they automate everything from database backups to system monitoring, log rotation, security scans, and report generation.&lt;/p&gt;
&lt;p&gt;This guide covers cron syntax, writing production-ready shell scripts, automated backups, monitoring, error handling, and notifications for reliable automation.&lt;/p&gt;</description></item><item><title>How to Manage Linux Services with Systemd - Complete SystemCTL Guide</title><link>https://www.buanacoding.com/2025/10/how-to-manage-linux-services-systemd-systemctl-guide.html</link><pubDate>Sun, 26 Oct 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-manage-linux-services-systemd-systemctl-guide.html</guid><description>&lt;p&gt;Managing services is fundamental to Linux server administration. Every web server, database, application, or background process runs as a service that needs to start, stop, restart, and recover from failures.&lt;/p&gt;
&lt;p&gt;Systemd replaced older init systems and is now the standard on virtually all major Linux distributions. If you work with Linux servers, you need to know systemd and systemctl inside out.&lt;/p&gt;
&lt;p&gt;This guide covers everything from basic service management to creating custom services, using timer units instead of cron, troubleshooting failures, and analyzing logs with journalctl.&lt;/p&gt;</description></item><item><title>How to Set Up and Manage Firewall on Linux with UFW and Firewalld</title><link>https://www.buanacoding.com/2025/10/how-to-manage-firewall-linux-ufw-firewalld.html</link><pubDate>Sat, 25 Oct 2025 14:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-manage-firewall-linux-ufw-firewalld.html</guid><description>&lt;p&gt;Firewalls control what network traffic can reach your Linux server. Without a firewall, every service you run is exposed to the internet. Attackers scan for open ports and exploit vulnerable services. A firewall blocks unwanted traffic while allowing legitimate connections.&lt;/p&gt;
&lt;p&gt;This guide covers firewall management on Linux using UFW (Ubuntu/Debian) and Firewalld (RHEL/CentOS). You&amp;rsquo;ll learn how to allow and deny ports, manage application profiles, restrict access by IP address, configure zones, set up port forwarding, and troubleshoot common issues.&lt;/p&gt;</description></item><item><title>How to Secure SSH Server on Ubuntu - Complete Hardening Guide</title><link>https://www.buanacoding.com/2025/10/how-to-secure-ssh-server-ubuntu-hardening-guide.html</link><pubDate>Sat, 25 Oct 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-secure-ssh-server-ubuntu-hardening-guide.html</guid><description>&lt;p&gt;SSH is the main way you access Linux servers remotely. If SSH gets compromised, attackers own your entire server. Default SSH setups are insecure - they allow password logins, permit root access, and get hammered by brute-force bots trying millions of password combinations.&lt;/p&gt;
&lt;p&gt;This guide hardens your SSH server on Ubuntu. You&amp;rsquo;ll disable passwords and use SSH keys, block root login, change the default port, set up fail2ban to stop brute-force attacks, add two-factor authentication, configure firewall rules, and monitor for suspicious activity.&lt;/p&gt;</description></item><item><title>How to Build Multi-Tenant Applications in Laravel</title><link>https://www.buanacoding.com/2025/10/how-to-build-multi-tenant-applications-laravel.html</link><pubDate>Fri, 24 Oct 2025 14:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-build-multi-tenant-applications-laravel.html</guid><description>&lt;p&gt;Multi-tenant applications let you serve multiple customers (tenants) with one codebase. Each tenant gets their own data, subdomain, and isolated environment, but you maintain just one application. This is how most SaaS products work - Slack, Shopify, and Basecamp all use multi-tenancy.&lt;/p&gt;
&lt;p&gt;This guide shows you how to build multi-tenant Laravel apps. You&amp;rsquo;ll learn the different tenancy models, why database-per-tenant wins for security, how to set up tenant isolation with Stancl/Tenancy package, handle subdomain routing, manage tenant databases, and scale your multi-tenant SaaS.&lt;/p&gt;</description></item><item><title>How to Implement Laravel Socialite for OAuth Login (Google, Facebook, GitHub)</title><link>https://www.buanacoding.com/2025/10/how-to-implement-laravel-socialite-oauth-login-google-facebook-github.html</link><pubDate>Fri, 24 Oct 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-implement-laravel-socialite-oauth-login-google-facebook-github.html</guid><description>&lt;p&gt;Social login lets users sign in with Google, Facebook, or GitHub instead of creating another password. Laravel Socialite makes OAuth integration simple with just a few lines of code. Users click &amp;lsquo;Login with Google&amp;rsquo;, authenticate on Google&amp;rsquo;s site, and return to your app with their profile data.&lt;/p&gt;
&lt;p&gt;This guide walks through setting up Socialite, configuring OAuth apps with Google, Facebook, and GitHub, handling callbacks, creating or linking user accounts, storing tokens securely, and managing edge cases like duplicate emails.&lt;/p&gt;</description></item><item><title>How to Set Up Automated Testing in Laravel with PHPUnit and Pest</title><link>https://www.buanacoding.com/2025/10/how-to-set-up-automated-testing-laravel-phpunit-pest.html</link><pubDate>Thu, 23 Oct 2025 14:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-set-up-automated-testing-laravel-phpunit-pest.html</guid><description>&lt;p&gt;Automated testing catches bugs before users see them. Laravel makes testing easy with built-in support for PHPUnit and Pest. You write tests that run your code and check the results match what you expect. When you change something, run the tests to make sure nothing broke.&lt;/p&gt;
&lt;p&gt;This guide shows you how to set up testing in Laravel, write feature tests for HTTP endpoints, write unit tests for business logic, test databases with factories, mock external services, test APIs, and integrate tests into your deployment pipeline.&lt;/p&gt;</description></item><item><title>How to Implement Role-Based Access Control (RBAC) in Laravel with Spatie Permission</title><link>https://www.buanacoding.com/2025/10/how-to-implement-rbac-laravel-spatie-permission.html</link><pubDate>Thu, 23 Oct 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-implement-rbac-laravel-spatie-permission.html</guid><description>&lt;p&gt;Role-Based Access Control (RBAC) lets you manage what users can do in your application by assigning them roles and permissions. Instead of checking if a specific user can edit posts, you check if they have the editor role or the edit-posts permission. This makes access control flexible and maintainable.&lt;/p&gt;
&lt;p&gt;Laravel&amp;rsquo;s Spatie Permission package handles all the database tables, relationships, and helper methods you need for RBAC. This guide walks through installing Spatie Permission, creating roles and permissions, assigning them to users, protecting routes and controllers, using Blade directives, and testing everything.&lt;/p&gt;</description></item><item><title>How to Create RESTful API Pagination and Filtering in Laravel</title><link>https://www.buanacoding.com/2025/10/how-to-create-restful-api-pagination-filtering-sorting-laravel.html</link><pubDate>Wed, 22 Oct 2025 12:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-create-restful-api-pagination-filtering-sorting-laravel.html</guid><description>&lt;p&gt;A good API lets clients filter, sort, and paginate through data. Nobody wants to download 10,000 records just to find a few items. This guide shows you how to add pagination, filtering, sorting, and search to your Laravel REST API.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll learn Laravel&amp;rsquo;s built-in pagination methods, how to add query parameters for filters and sorting, search across multiple columns, cursor pagination for large datasets, and API resources for formatting responses. We&amp;rsquo;ll also cover performance tips and common mistakes.&lt;/p&gt;</description></item><item><title>How to Build Real-Time Notifications with Laravel Broadcasting and Pusher</title><link>https://www.buanacoding.com/2025/10/how-to-build-real-time-notifications-laravel-broadcasting-pusher.html</link><pubDate>Wed, 22 Oct 2025 11:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-build-real-time-notifications-laravel-broadcasting-pusher.html</guid><description>&lt;p&gt;Real-time notifications let you push updates to users instantly without page refreshes. Laravel Broadcasting with Pusher makes this easy using WebSockets. When something happens on your server like a new message, order update, or system alert, your frontend gets notified immediately.&lt;/p&gt;
&lt;p&gt;This guide shows you how to set up Laravel Broadcasting from scratch. We&amp;rsquo;ll install Pusher, create events, configure channels for public and private notifications, set up Laravel Echo on the frontend, and test everything. You&amp;rsquo;ll also learn about presence channels for tracking online users and production deployment tips.&lt;/p&gt;</description></item><item><title>How to Implement Multi-Factor Authentication (2FA) in Laravel with Laravel Fortify</title><link>https://www.buanacoding.com/2025/10/laravel-two-factor-authentication-2fa-fortify.html</link><pubDate>Wed, 22 Oct 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/laravel-two-factor-authentication-2fa-fortify.html</guid><description>&lt;p&gt;Two-factor authentication (2FA) adds an extra layer of security to your Laravel application. Users need both their password and a time-based code from an authenticator app to log in. Laravel Fortify handles all the backend logic, and you build the frontend however you want.&lt;/p&gt;
&lt;p&gt;This guide walks through the complete setup: installing Fortify, enabling 2FA, generating QR codes for Google Authenticator, managing recovery codes, confirming codes before activation to prevent lockouts, and testing everything. We&amp;rsquo;ll also cover security practices and common problems you might run into.&lt;/p&gt;</description></item><item><title>How to Implement Message Queuing with RabbitMQ in Go</title><link>https://www.buanacoding.com/2025/10/how-to-implement-message-queuing-with-rabbitmq-in-go.html</link><pubDate>Mon, 20 Oct 2025 06:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-implement-message-queuing-with-rabbitmq-in-go.html</guid><description>&lt;p&gt;It&amp;rsquo;s 3 AM and your phone won&amp;rsquo;t stop buzzing. Your API just got hammered with 10,000 requests in 30 seconds. Users uploading images, generating PDF reports, sending welcome emails, processing credit cards - all at once. Your server&amp;rsquo;s trying to handle everything synchronously and it&amp;rsquo;s dying. Response times creep from 200ms to 15 seconds. Timeout errors everywhere. Your monitoring dashboard looks like a Christmas tree, but red instead of green.&lt;/p&gt;</description></item><item><title>How to Build AI/LLM Applications in Go - OpenAI and Ollama Integration</title><link>https://www.buanacoding.com/2025/10/how-to-build-ai-llm-applications-in-go-openai-and-ollama-integration.html</link><pubDate>Sat, 18 Oct 2025 12:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-build-ai-llm-applications-in-go-openai-and-ollama-integration.html</guid><description>&lt;p&gt;AI applications are everywhere now. Chatbots answering customer questions, code assistants writing functions, content generators creating blog posts, search systems understanding natural language. If you&amp;rsquo;re building with Go, you need to know how to tap into these language models without fighting with complicated Python libraries or rewriting your entire stack.&lt;/p&gt;
&lt;p&gt;The good news: integrating AI into Go applications is straightforward once you understand the patterns. You have two main paths - cloud APIs like OpenAI for maximum quality and scale, or local models with Ollama for privacy and cost control. Sometimes you want both.&lt;/p&gt;</description></item><item><title>How to Handle File Uploads in Go - Validation, Storage, and Security</title><link>https://www.buanacoding.com/2025/10/how-to-handle-file-uploads-in-go-validation-storage-and-security.html</link><pubDate>Fri, 17 Oct 2025 12:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-handle-file-uploads-in-go-validation-storage-and-security.html</guid><description>&lt;p&gt;File uploads seem simple until you deploy to production. Users upload 500MB videos that crash your server. Someone uploads a PHP file disguised as an image and compromises your system. Filenames with path traversal characters like &lt;code&gt;../../etc/passwd&lt;/code&gt; expose sensitive data. What started as a basic feature becomes a security nightmare.&lt;/p&gt;
&lt;p&gt;This guide demonstrates how to handle file uploads securely in Go applications. You&amp;rsquo;ll learn to parse multipart form data correctly, validate file types using magic number detection, enforce size limits that protect server resources, sanitize filenames to prevent attacks, store files securely with proper permissions, and implement production-ready patterns that scale.&lt;/p&gt;</description></item><item><title>How to Implement CI/CD for Go Applications with GitHub Actions</title><link>https://www.buanacoding.com/2025/10/how-to-implement-cicd-for-go-applications-with-github-actions.html</link><pubDate>Fri, 17 Oct 2025 11:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-implement-cicd-for-go-applications-with-github-actions.html</guid><description>&lt;p&gt;Manual deployments are error-prone and time-consuming. You make a change, run tests locally, build the binary, SSH into servers, copy files, restart services, and hope nothing breaks. Multiply this by ten deployments per day and you&amp;rsquo;ve wasted hours on repetitive tasks that should be automated.&lt;/p&gt;
&lt;p&gt;This guide demonstrates how to implement CI/CD (Continuous Integration/Continuous Deployment) for Go applications using GitHub Actions. You&amp;rsquo;ll learn to create automated workflows that test code on every push, build optimized binaries for multiple platforms, deploy Docker containers automatically, cache dependencies for faster builds, and apply production-ready practices that catch bugs before users do.&lt;/p&gt;</description></item><item><title>How to Work with MySQL in Go - Connection Pooling and Transactions Guide</title><link>https://www.buanacoding.com/2025/10/how-to-work-with-mysql-in-go-connection-pooling-and-transactions.html</link><pubDate>Fri, 17 Oct 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-work-with-mysql-in-go-connection-pooling-and-transactions.html</guid><description>&lt;p&gt;MySQL remains one of the most popular relational databases for web applications. Go provides excellent MySQL support through the database/sql package and MySQL driver. Understanding connection pooling and transactions is critical for building production-ready applications that handle concurrent users efficiently while maintaining data consistency.&lt;/p&gt;
&lt;p&gt;This guide demonstrates how to work with MySQL in Go effectively. You&amp;rsquo;ll learn to connect to MySQL with proper driver configuration, implement CRUD operations with prepared statements, configure connection pooling for optimal performance, handle transactions correctly to maintain data integrity, manage NULL values and error conditions, and apply production best practices that scale.&lt;/p&gt;</description></item><item><title>How to Use Mock Testing in Go with Testify and Mockery - Complete Guide</title><link>https://www.buanacoding.com/2025/10/how-to-use-mock-testing-in-go-with-testify-and-mockery.html</link><pubDate>Fri, 17 Oct 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-use-mock-testing-in-go-with-testify-and-mockery.html</guid><description>&lt;p&gt;Testing individual units of code in isolation is critical for building reliable software. When your code depends on databases, external APIs, or other services, testing becomes complex and slow. Mock testing solves this by replacing real dependencies with controlled fake implementations, allowing you to test your code quickly without external systems.&lt;/p&gt;
&lt;p&gt;This guide demonstrates how to implement effective mock testing in Go using Testify and Mockery. You&amp;rsquo;ll learn to design testable code with interfaces, generate mocks automatically with Mockery, write assertions with Testify, verify method calls and return values, implement table-driven mock tests, and follow best practices that create maintainable test suites without over-mocking.&lt;/p&gt;</description></item><item><title>How to Implement Session Management in Go - Cookies and Redis Tutorial</title><link>https://www.buanacoding.com/2025/10/how-to-implement-session-management-in-go-cookies-and-redis.html</link><pubDate>Thu, 16 Oct 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-implement-session-management-in-go-cookies-and-redis.html</guid><description>&lt;p&gt;Web applications need to remember users across multiple requests. When a user logs in, adds items to a shopping cart, or sets preferences, the application must maintain this state throughout their session. HTTP&amp;rsquo;s stateless nature makes this challenging, but proper session management solves this problem by storing user state securely on the server while using cookies to track users across requests.&lt;/p&gt;
&lt;p&gt;This complete guide demonstrates how to implement production-ready session management in Go using cookies and Redis. You&amp;rsquo;ll learn to create secure sessions, store data efficiently in Redis, implement session middleware, handle authentication flows, prevent common security vulnerabilities, and build scalable session systems that work across multiple server instances.&lt;/p&gt;</description></item><item><title>How to Build WebSocket Applications in Go - Real-time Chat Example</title><link>https://www.buanacoding.com/2025/10/how-to-build-websocket-applications-in-go-real-time-chat.html</link><pubDate>Wed, 15 Oct 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-build-websocket-applications-in-go-real-time-chat.html</guid><description>&lt;p&gt;Ever wanted to build a real-time chat app, live notification system, or multiplayer game? WebSocket is your answer. Unlike regular HTTP where clients have to constantly ask &amp;ldquo;got any updates?&amp;rdquo;, WebSocket keeps a persistent connection open so the server can push data whenever it wants. No more polling, no more delays—just instant, bidirectional communication.&lt;/p&gt;
&lt;p&gt;In this tutorial, we&amp;rsquo;re building a production-ready chat application from scratch using Go and the &lt;strong&gt;gorilla/websocket&lt;/strong&gt; package. By the end, you&amp;rsquo;ll have a working chat app where multiple users can send messages in real-time.&lt;/p&gt;</description></item><item><title>How to Work with MongoDB in Go - Complete CRUD Tutorial</title><link>https://www.buanacoding.com/2025/10/how-to-work-with-mongodb-in-go-complete-crud-tutorial.html</link><pubDate>Mon, 13 Oct 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-work-with-mongodb-in-go-complete-crud-tutorial.html</guid><description>&lt;p&gt;Working with MongoDB in Go is straightforward once you understand the official driver’s patterns: always use &lt;a href="https://www.buanacoding.com/2025/04/using-context-in-go-cancellation.html"&gt;
 contexts
&lt;/a&gt;
, define strong models with &lt;code&gt;bson&lt;/code&gt; tags (and clean &lt;a href="https://www.buanacoding.com/2025/04/working-with-json-in-go-encode-decode.html"&gt;
 JSON handling
&lt;/a&gt;
), ensure indexes, and wrap database calls behind a repository (see &lt;a href="https://www.buanacoding.com/2025/05/structuring-go-projects-clean-project-structure-and-best-practices.html"&gt;
 project structure best practices
&lt;/a&gt;
). In this tutorial, you’ll build a complete CRUD flow using idiomatic Go and production-friendly practices.&lt;/p&gt;
&lt;p&gt;What you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install and initialize the official driver&lt;/li&gt;
&lt;li&gt;Connect to MongoDB with timeouts and pooling&lt;/li&gt;
&lt;li&gt;Design models with &lt;code&gt;bson&lt;/code&gt; and &lt;code&gt;json&lt;/code&gt; tags&lt;/li&gt;
&lt;li&gt;Create necessary indexes programmatically&lt;/li&gt;
&lt;li&gt;Implement Create, Read, Update, Delete operations&lt;/li&gt;
&lt;li&gt;Add projections, filtering, pagination, and error handling&lt;/li&gt;
&lt;li&gt;Structure your code for maintainability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;</description></item><item><title>How to Containerize and Deploy Go Apps with Docker</title><link>https://www.buanacoding.com/2025/10/how-to-containerize-and-deploy-go-apps-with-docker.html</link><pubDate>Tue, 07 Oct 2025 06:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-containerize-and-deploy-go-apps-with-docker.html</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Deploying Go applications used to mean SSH into servers, copying binaries, managing dependencies, and praying everything works. Different machines had different library versions. Production behaved differently than development. Debugging deployment issues wasted hours.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is Docker for Go?&lt;/strong&gt; Docker is a containerization platform that packages your Go application and all its dependencies into a portable container image. Instead of installing Go and dependencies on every server, Docker bundles everything your app needs into a container that runs identically everywhere - from your laptop to production servers.&lt;/p&gt;</description></item><item><title>How to Send Emails in Go - SMTP, SendGrid, and Mailgun Integration</title><link>https://www.buanacoding.com/2025/10/how-to-send-emails-in-go-smtp-sendgrid-mailgun.html</link><pubDate>Mon, 06 Oct 2025 18:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-send-emails-in-go-smtp-sendgrid-mailgun.html</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Your application needs to send emails. Welcome messages after signup, password reset links, order confirmations, notification alerts. Email is still the most reliable way to reach users, but sending emails programmatically is harder than it looks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is email sending in Go?&lt;/strong&gt; Email sending in Go refers to programmatically delivering emails from your application using either SMTP protocol directly or third-party email service APIs like SendGrid and Mailgun. Instead of manually composing and sending emails, your Go code automatically sends transactional emails triggered by user actions.&lt;/p&gt;</description></item><item><title>How to Implement Background Jobs in Go with Asynq and Redis</title><link>https://www.buanacoding.com/2025/10/how-to-implement-background-jobs-in-go-with-asynq-and-redis.html</link><pubDate>Mon, 06 Oct 2025 16:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-implement-background-jobs-in-go-with-asynq-and-redis.html</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Your API is slow. Not because the code is inefficient, but because you&amp;rsquo;re doing too much in the HTTP request cycle. Sending emails, processing images, generating reports - all blocking the response while the user waits. That&amp;rsquo;s not how you scale.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are background jobs?&lt;/strong&gt; Background jobs are tasks that run asynchronously outside the main request-response cycle. Instead of making users wait while your server processes heavy workloads, you push these tasks into a queue and handle them separately in worker processes. This keeps your API fast and responsive.&lt;/p&gt;</description></item><item><title>How to Profile and Optimize Go Applications with pprof</title><link>https://www.buanacoding.com/2025/10/how-to-profile-and-optimize-go-applications-with-pprof.html</link><pubDate>Mon, 06 Oct 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-profile-and-optimize-go-applications-with-pprof.html</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Your Go application is slow. Requests take too long, memory usage keeps climbing, or CPU maxes out under load. You need answers, not guesses. That&amp;rsquo;s where pprof comes in.&lt;/p&gt;
&lt;p&gt;pprof is Go&amp;rsquo;s built-in profiler that shows you exactly what&amp;rsquo;s happening inside your running application. It tells you which functions eat CPU cycles, which code paths allocate tons of memory, where goroutines get stuck, and what&amp;rsquo;s blocking your program. With this data, you stop guessing and start fixing real bottlenecks.&lt;/p&gt;</description></item><item><title>How to Perform Database Migrations in Go using golang-migrate</title><link>https://www.buanacoding.com/2025/10/how-to-perform-database-migrations-in-go-using-golang-migrate.html</link><pubDate>Sun, 05 Oct 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-perform-database-migrations-in-go-using-golang-migrate.html</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Managing database schema changes is one of those tasks that seems simple until you&amp;rsquo;re dealing with multiple environments, team members making conflicting changes, or trying to rollback a production deployment at 2 AM. If you&amp;rsquo;ve ever manually run SQL scripts on production hoping you didn&amp;rsquo;t miss anything, you know exactly what I&amp;rsquo;m talking about.&lt;/p&gt;
&lt;p&gt;golang-migrate solves this problem by giving you version control for your database schema. Just like git tracks code changes, migrations track schema changes. You can move forward, rollback, and know exactly what state your database is in at any time.&lt;/p&gt;</description></item><item><title>How to Build a CLI Tool in Go with Cobra and Viper</title><link>https://www.buanacoding.com/2025/10/how-to-build-a-cli-tool-in-go-with-cobra-and-viper.html</link><pubDate>Sat, 04 Oct 2025 14:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-build-a-cli-tool-in-go-with-cobra-and-viper.html</guid><description>&lt;p&gt;I&amp;rsquo;ve built a lot of CLI tools over the years - deployment scripts, database migration tools, log analyzers, you name it. Every time I start a new one, I reach for Cobra and Viper. Not because they&amp;rsquo;re trendy (though they are), but because they solve the boring parts so I can focus on what my tool actually does.&lt;/p&gt;
&lt;p&gt;Think about kubectl, hugo, gh (GitHub CLI) - all built with Cobra. There&amp;rsquo;s a reason for that. Cobra gives you a clean command structure, automatic help generation, flag parsing, and all the stuff you&amp;rsquo;d otherwise spend hours implementing. Viper adds configuration management so users can configure your tool however they want - config files, environment variables, flags, whatever.&lt;/p&gt;</description></item><item><title>How to Implement OAuth2 in Go Google GitHub and Facebook Login</title><link>https://www.buanacoding.com/2025/10/how-to-implement-oauth2-in-go-google-github-facebook-login.html</link><pubDate>Sat, 04 Oct 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-implement-oauth2-in-go-google-github-facebook-login.html</guid><description>&lt;p&gt;Nobody wants to create yet another account with yet another password. I&amp;rsquo;ve built authentication systems that required users to sign up with email and password, and the drop-off rate was painful. Then I added &amp;ldquo;Login with Google&amp;rdquo; and conversions jumped 40%. Users already have accounts they trust - why make them create new ones?&lt;/p&gt;
&lt;p&gt;OAuth2 lets users authenticate with providers they already use - Google, GitHub, Facebook, whatever. You get verified emails, users don&amp;rsquo;t manage more passwords, and everyone&amp;rsquo;s happy. The best part? It&amp;rsquo;s not as complicated as it looks once you understand the flow.&lt;/p&gt;</description></item><item><title>How to Upload Files to AWS S3 in Go Complete Guide with SDK v2</title><link>https://www.buanacoding.com/2025/10/how-to-upload-files-to-aws-s3-in-go-with-sdk-v2.html</link><pubDate>Fri, 03 Oct 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-upload-files-to-aws-s3-in-go-with-sdk-v2.html</guid><description>&lt;p&gt;If you&amp;rsquo;ve built any real application, you know file storage becomes a problem fast. User avatars, document uploads, video files - they pile up quickly, and you need somewhere reliable to put them. That&amp;rsquo;s where AWS S3 comes in. It&amp;rsquo;s like having unlimited storage that you only pay for what you use, and it integrates beautifully with Go.&lt;/p&gt;
&lt;p&gt;AWS recently rewrote their entire Go SDK with v2, and honestly, it&amp;rsquo;s a massive improvement. Cleaner APIs, better error handling, proper context support - everything you&amp;rsquo;d want in a modern Go library. If you&amp;rsquo;re starting fresh or thinking about upgrading from v1, this guide has you covered.&lt;/p&gt;</description></item><item><title>How to Use Redis with Go - Caching and Session Management Tutorial</title><link>https://www.buanacoding.com/2025/10/how-to-use-redis-with-go-caching-session-management.html</link><pubDate>Thu, 02 Oct 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-use-redis-with-go-caching-session-management.html</guid><description>&lt;p&gt;Modern applications demand speed and scalability that traditional databases struggle to provide alone. Users expect instant responses, APIs must handle thousands of concurrent requests, and systems need to scale horizontally without performance degradation. Redis addresses these challenges by providing blazing-fast in-memory data storage that complements your existing database infrastructure.&lt;/p&gt;
&lt;p&gt;This comprehensive guide demonstrates how to integrate Redis with Go applications for caching and session management. You&amp;rsquo;ll learn to set up the go-redis client, implement various caching patterns, manage user sessions across distributed servers, optimize connection pooling, handle cache invalidation, and follow production best practices that ensure reliability and performance at scale.&lt;/p&gt;</description></item><item><title>How to Implement Rate Limiting in Go - Protect Your API from Abuse</title><link>https://www.buanacoding.com/2025/10/how-to-implement-rate-limiting-in-go-protect-api-from-abuse.html</link><pubDate>Wed, 01 Oct 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-implement-rate-limiting-in-go-protect-api-from-abuse.html</guid><description>&lt;p&gt;APIs power modern applications by exposing functionality to clients, but unrestricted access creates vulnerabilities. A single misbehaving client can overwhelm your server, degrading performance for all users. Malicious actors can exploit unprotected endpoints to scrape data, attempt credential stuffing, or launch denial of service attacks. Rate limiting provides the first line of defense against these threats.&lt;/p&gt;
&lt;p&gt;This comprehensive guide demonstrates how to implement rate limiting in Go applications. You&amp;rsquo;ll learn multiple algorithms including token bucket and sliding window approaches, build middleware for automatic request throttling, implement per-IP and per-user limiting strategies, integrate Redis for distributed systems, and follow production best practices for protecting your APIs effectively.&lt;/p&gt;</description></item><item><title>How to Implement JWT Authentication in Go - Secure REST API Tutorial</title><link>https://www.buanacoding.com/2025/09/how-to-implement-jwt-authentication-in-go-secure-rest-api.html</link><pubDate>Tue, 30 Sep 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/how-to-implement-jwt-authentication-in-go-secure-rest-api.html</guid><description>&lt;p&gt;Authentication sits at the foundation of any secure application. Whether you&amp;rsquo;re building a REST API, microservice, or full-stack web application, you need a reliable way to verify user identity and protect sensitive endpoints. JWT (JSON Web Token) has become the de facto standard for stateless authentication in modern applications, and Go provides excellent tools for implementing it correctly.&lt;/p&gt;
&lt;p&gt;This guide walks through implementing JWT authentication in Go from the ground up. You&amp;rsquo;ll learn how to generate tokens, validate them, handle refresh tokens, create authentication middleware, and follow security best practices that work in production environments. By the end, you&amp;rsquo;ll have a complete authentication system ready to integrate into your Go applications.&lt;/p&gt;</description></item><item><title>Service Discovery in Microservices Golang - Consul and etcd Implementation</title><link>https://www.buanacoding.com/2025/09/service-discovery-microservices-golang-consul-etcd.html</link><pubDate>Mon, 29 Sep 2025 08:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/service-discovery-microservices-golang-consul-etcd.html</guid><description>&lt;p&gt;In the early days of web development, finding services was simple. Your database lived at &lt;code&gt;localhost:5432&lt;/code&gt;, your cache at &lt;code&gt;localhost:6379&lt;/code&gt;, and everything was predictable. But when you move to microservices, suddenly you have dozens of services spinning up and down across multiple servers, and nobody knows where anything is anymore.&lt;/p&gt;
&lt;p&gt;This is where service discovery becomes your lifeline. Instead of hardcoding addresses and hoping for the best, you get a dynamic phone book that keeps track of who&amp;rsquo;s available, where they live, and whether they&amp;rsquo;re actually working. After building several distributed systems in Go, I can tell you that getting service discovery right is often the difference between a system that scales gracefully and one that becomes an operational nightmare.&lt;/p&gt;</description></item><item><title>API Gateway with Golang - Load Balancing and Rate Limiting Implementation</title><link>https://www.buanacoding.com/2025/09/api-gateway-golang-load-balancing-rate-limiting.html</link><pubDate>Mon, 29 Sep 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/api-gateway-golang-load-balancing-rate-limiting.html</guid><description>&lt;p&gt;When you&amp;rsquo;re building distributed systems, one component stands between chaos and order: the API Gateway. Think of it as the bouncer at an exclusive club - it decides who gets in, where they go, and how fast they can enter. After working with various microservice architectures, I can tell you that a well-implemented API Gateway is often the difference between a system that scales gracefully and one that crumbles under pressure.&lt;/p&gt;</description></item><item><title>Event-Driven Architecture with Golang and Message Queues</title><link>https://www.buanacoding.com/2025/09/event-driven-architecture-golang-message-queues.html</link><pubDate>Sat, 27 Sep 2025 03:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/event-driven-architecture-golang-message-queues.html</guid><description>&lt;p&gt;Traditional request-response architectures work well for simple applications, but as systems grow in complexity and scale, they often become bottlenecks. Event-driven architecture gives you a better way to build systems by letting components talk to each other through messages instead of direct calls. When combined with Go&amp;rsquo;s excellent concurrency model and robust ecosystem, event-driven systems become powerful tools for building scalable, resilient applications.&lt;/p&gt;
&lt;p&gt;In this guide, you&amp;rsquo;ll learn how to build event-driven systems using Go and message queues that actually work in production. We&amp;rsquo;ll explore event sourcing patterns, CQRS implementation, and practical strategies for building systems that can handle high throughput while maintaining data consistency and system reliability.&lt;/p&gt;</description></item><item><title>Microservices with Golang - Architecture and Implementation Guide</title><link>https://www.buanacoding.com/2025/09/microservices-golang-architecture-implementation-guide.html</link><pubDate>Sat, 27 Sep 2025 00:01:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/microservices-golang-architecture-implementation-guide.html</guid><description>&lt;p&gt;Moving from monolithic to microservices architecture has become one of the biggest changes in how we build software today. While monolithic applications bundle all functionality into a single deployable unit, microservices break down applications into smaller, independent services that communicate over well-defined APIs. When combined with Go&amp;rsquo;s performance characteristics and deployment simplicity, microservices become a powerful approach for building scalable, maintainable systems.&lt;/p&gt;
&lt;p&gt;In this guide, you&amp;rsquo;ll learn how to design, build, and deploy microservices using Go. We&amp;rsquo;ll cover architectural patterns, service communication strategies, containerization, and production deployment techniques that will help you build robust distributed systems.&lt;/p&gt;</description></item><item><title>Building GraphQL Server with gqlgen in Golang</title><link>https://www.buanacoding.com/2025/09/building-graphql-server-gqlgen-golang.html</link><pubDate>Fri, 26 Sep 2025 03:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/building-graphql-server-gqlgen-golang.html</guid><description>&lt;p&gt;Modern web applications require APIs that can efficiently serve data to various clients with different needs. While traditional REST APIs have served this purpose for years, GraphQL has emerged as a powerful alternative that solves many common API development challenges. When building GraphQL servers in Go, gqlgen stands out as the most mature and feature-rich library available.&lt;/p&gt;
&lt;p&gt;This comprehensive guide will walk you through building a complete GraphQL server using gqlgen, from initial setup to production deployment. We&amp;rsquo;ll cover schema design, resolver implementation, database integration, and performance optimization techniques that will help you build robust, scalable GraphQL APIs.&lt;/p&gt;</description></item><item><title>GraphQL with Golang - A Modern Alternative to REST API</title><link>https://www.buanacoding.com/2025/09/graphql-golang-modern-alternative-rest-api.html</link><pubDate>Fri, 26 Sep 2025 02:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/graphql-golang-modern-alternative-rest-api.html</guid><description>&lt;p&gt;The landscape of API development has evolved significantly over the past decade. While REST APIs have been the dominant architecture for building web services, GraphQL has emerged as a compelling alternative that addresses many limitations of traditional REST-based approaches. When combined with Go&amp;rsquo;s performance and simplicity, GraphQL creates a powerful foundation for modern API development.&lt;/p&gt;
&lt;h2 id="understanding-graphql-beyond-traditional-rest"&gt;Understanding GraphQL: Beyond Traditional REST&lt;/h2&gt;
&lt;p&gt;GraphQL represents a paradigm shift in how we think about API design and data fetching. Unlike REST, which exposes multiple endpoints for different resources, GraphQL provides a single endpoint that can handle complex queries with precise data requirements.&lt;/p&gt;</description></item><item><title>Fiber vs Gin vs Echo - Go Framework Comparison 2025</title><link>https://www.buanacoding.com/2025/09/fiber-vs-gin-vs-echo-golang-framework-comparison-2025.html</link><pubDate>Thu, 25 Sep 2025 03:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/fiber-vs-gin-vs-echo-golang-framework-comparison-2025.html</guid><description>&lt;p&gt;Choosing the right web framework can make or break your Go project. I&amp;rsquo;ve spent the last three years working with different Go frameworks across various production systems, and the three names that consistently come up in every discussion are Gin, Fiber, and Echo. Each has its passionate advocates, but which one should you actually choose in 2025?&lt;/p&gt;
&lt;p&gt;The landscape has evolved significantly since these frameworks first appeared. Performance gaps have narrowed, feature sets have matured, and the ecosystem around each has grown substantially. What used to be clear-cut decisions based on pure speed are now more nuanced choices that depend on your specific use case, team experience, and architectural requirements.&lt;/p&gt;</description></item><item><title>Building REST API with Gin Framework Golang - Production Ready</title><link>https://www.buanacoding.com/2025/09/building-rest-api-gin-framework-golang-production-ready.html</link><pubDate>Thu, 25 Sep 2025 02:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/building-rest-api-gin-framework-golang-production-ready.html</guid><description>&lt;p&gt;Building a REST API might seem straightforward at first glance, but creating one that&amp;rsquo;s actually ready for production is a different beast entirely. After spending years working with various Go frameworks, I can tell you that the Gin framework hits that sweet spot between developer productivity and performance that makes it perfect for building robust APIs.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve been building &lt;a href="https://www.buanacoding.com/2025/05/how-to-build-a-rest-api-in-go-using-net-http.html"&gt;
 basic REST APIs with Go&amp;rsquo;s net/http package
&lt;/a&gt;
, you&amp;rsquo;ve probably noticed how much boilerplate code you need to write for routing, middleware, and request handling. That&amp;rsquo;s where Gin shines - it provides all the essential features you need while maintaining the performance advantages that make Go special.&lt;/p&gt;</description></item><item><title>Easy Background Processing Tutorial</title><link>https://www.buanacoding.com/2025/09/laravel-queue-jobs-background-processing-tutorial.html</link><pubDate>Wed, 24 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-queue-jobs-background-processing-tutorial.html</guid><description>&lt;p&gt;Ever had a user complain that your app takes forever to send an email or process an image upload? Or maybe you&amp;rsquo;ve watched your response times crawl to a halt because you&amp;rsquo;re trying to do too much work during a single request? Laravel queues are the solution you&amp;rsquo;ve been looking for, and they&amp;rsquo;re easier to set up than you might think.&lt;/p&gt;
&lt;p&gt;Think of Laravel queues as your app&amp;rsquo;s personal assistant. Instead of making users wait while you send emails, resize images, or generate reports, you hand these tasks off to the background and let users continue with their day. The work still gets done, but it doesn&amp;rsquo;t block the user experience.&lt;/p&gt;</description></item><item><title>Error Tracking Tools and Techniques</title><link>https://www.buanacoding.com/2025/09/laravel-production-monitoring-error-tracking.html</link><pubDate>Tue, 23 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-production-monitoring-error-tracking.html</guid><description>&lt;p&gt;Running a Laravel application in production without proper monitoring is like driving blindfolded - you won&amp;rsquo;t know there&amp;rsquo;s a problem until you crash. The moment your app goes live, dozens of things can go wrong: database connections can fail, APIs can timeout, memory can run out, or users might trigger unexpected errors you never saw during development.&lt;/p&gt;
&lt;p&gt;Good monitoring isn&amp;rsquo;t just about knowing when things break - it&amp;rsquo;s about catching issues before they affect users, understanding performance trends, and having the data you need to fix problems quickly. Whether you&amp;rsquo;re running a small business site or a high-traffic application, the right monitoring setup can save you countless sleepless nights and frustrated customer calls.&lt;/p&gt;</description></item><item><title>Boost Performance with High-Speed Application Server</title><link>https://www.buanacoding.com/2025/09/laravel-octane-boost-performance-tutorial.html</link><pubDate>Mon, 22 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-octane-boost-performance-tutorial.html</guid><description>&lt;p&gt;If you&amp;rsquo;re tired of waiting for your Laravel app to respond and want to see some serious speed improvements, Laravel Octane might be exactly what you&amp;rsquo;re looking for. Think of it as giving your application a turbo boost - we&amp;rsquo;re talking about performance gains that can make your app 3x to 10x faster in many scenarios.&lt;/p&gt;
&lt;p&gt;Laravel Octane takes your regular Laravel application and runs it on high-performance application servers like Swoole or RoadRunner. Instead of booting up your entire application for every single request (which is what traditional PHP does), Octane keeps your app loaded in memory and reuses it for multiple requests. The result? Lightning-fast response times that will make your users happy.&lt;/p&gt;</description></item><item><title>Laravel N+1 Query Problem Solution Essential Database Optimization Guide</title><link>https://www.buanacoding.com/2025/09/laravel-n-plus-one-query-problem-solution.html</link><pubDate>Mon, 22 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-n-plus-one-query-problem-solution.html</guid><description>&lt;p&gt;If you&amp;rsquo;ve ever wondered why your Laravel app suddenly becomes sluggish when displaying lists of data, you might be dealing with the dreaded N+1 query problem. It&amp;rsquo;s one of those sneaky performance killers that can turn a fast application into a slow, resource-hungry monster. Don&amp;rsquo;t worry though - once you understand what&amp;rsquo;s happening and how to fix it, you&amp;rsquo;ll never fall into this trap again.&lt;/p&gt;
&lt;h2 id="what-is-the-n1-query-problem"&gt;What is the N+1 Query Problem?&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s what happens: your app makes one query to get a list of records, then fires off a separate query for each record to grab related data. Picture this - you want to show 100 blog posts with their authors&amp;rsquo; names. Instead of being smart about it, your app runs one query to get the posts, then 100 more queries to fetch each author. That&amp;rsquo;s 101 database hits when you could&amp;rsquo;ve done it with just 2!&lt;/p&gt;</description></item><item><title>Breaking Monolith into Scalable Services</title><link>https://www.buanacoding.com/2025/09/laravel-microservices-breaking-monolith.html</link><pubDate>Sat, 20 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-microservices-breaking-monolith.html</guid><description>&lt;p&gt;As your Laravel application grows, you might find yourself hitting the limitations of a monolithic architecture. Database bottlenecks, deployment challenges, and team coordination issues become increasingly common. The solution? Transitioning to a microservices architecture that breaks your monolith into smaller, manageable, and independently deployable services.&lt;/p&gt;
&lt;p&gt;This comprehensive guide will walk you through the entire process of decomposing your Laravel monolith into microservices, from initial planning to practical implementation strategies.&lt;/p&gt;
&lt;h2 id="understanding-monolith-vs-microservices"&gt;Understanding Monolith vs Microservices&lt;/h2&gt;
&lt;p&gt;A monolithic application packages all functionality into a single deployable unit. While this approach works well for small to medium applications, it presents several challenges as your application scales:&lt;/p&gt;</description></item><item><title>Laravel Integration with React Vue Complete Inertia.js Guide for Modern SPA</title><link>https://www.buanacoding.com/2025/09/laravel-integration-react-vue-inertia.html</link><pubDate>Fri, 19 Sep 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-integration-react-vue-inertia.html</guid><description>&lt;p&gt;Inertia.js lets you build a single‑page app on top of Laravel without maintaining a separate API. You keep server‑side routing, controllers, middleware, and validation, while rendering pages with React or Vue. The result feels like an SPA—fast navigation, preserved state, and partial reloads—without the overhead of duplicating server logic.&lt;/p&gt;
&lt;p&gt;This guide walks through installation, page structure, forms, validation, shared data, server‑side rendering (optional), authentication with Sanctum, building assets with Vite, deployment, and fixes for the most common issues.&lt;/p&gt;</description></item><item><title>Modern API Tutorial for Complex Applications</title><link>https://www.buanacoding.com/2025/09/laravel-graphql-tutorial-api-modern.html</link><pubDate>Thu, 18 Sep 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-graphql-tutorial-api-modern.html</guid><description>&lt;p&gt;GraphQL shines when clients need flexible data shapes, fewer round trips, and typed contracts. For dashboards, mobile apps, or complex relationships, it can reduce API sprawl and speed up development. This tutorial uses Lighthouse, a mature GraphQL package for Laravel, and covers everything you need to go from a blank project to a production-ready API.&lt;/p&gt;
&lt;h2 id="why-graphql-and-when-not-to-use-it"&gt;Why GraphQL (and when not to use it)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use GraphQL when clients need to query exactly the fields they need, combine multiple resources in one request, or evolve contracts without versioning endpoints.&lt;/li&gt;
&lt;li&gt;Prefer REST for simple, cacheable resources or when infrastructure, team skills, and tools already fit REST neatly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="install-lighthouse"&gt;Install Lighthouse&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;composer require nuwave/lighthouse
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;php artisan vendor:publish --provider&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Nuwave\Lighthouse\LighthouseServiceProvider&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The publish step creates &lt;code&gt;graphql/schema.graphql&lt;/code&gt; and a config file. By default, the HTTP endpoint is &lt;code&gt;/graphql&lt;/code&gt; and the playground is enabled in non‑production environments.&lt;/p&gt;</description></item><item><title>Laravel File Upload with Validation and Security Best Practices</title><link>https://www.buanacoding.com/2025/09/laravel-file-upload-validation-security.html</link><pubDate>Wed, 17 Sep 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-file-upload-validation-security.html</guid><description>&lt;p&gt;File uploads are simple to build and easy to get wrong. The goal is to accept only what you expect, store files safely, and serve them without opening new risks. The checklist and examples below cover validation, storage, serving, limits, and common pitfalls.&lt;/p&gt;
&lt;h2 id="accept-only-what-you-need"&gt;Accept only what you need&lt;/h2&gt;
&lt;p&gt;Validate every request. If a feature requires only images, do not accept arbitrary files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// app/Http/Controllers/AvatarController.php
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nv"&gt;$validated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s1"&gt;&amp;#39;avatar&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s1"&gt;&amp;#39;required&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s1"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s1"&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// jpeg, png, bmp, gif, svg, webp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;max:2048&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// KB (2 MB)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mimetypes:image/jpeg,image/png,image/webp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// or: &amp;#39;mimes:jpeg,png,webp&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nv"&gt;$path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;avatar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;avatars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;avatar_path&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Avatar updated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notes&lt;/p&gt;</description></item><item><title>Development and Production Environment Setup</title><link>https://www.buanacoding.com/2025/09/laravel-docker-setup-development-production.html</link><pubDate>Tue, 16 Sep 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-docker-setup-development-production.html</guid><description>&lt;p&gt;Docker makes Laravel environments consistent across machines and stages. The steps below outline a clean setup for local development and a hardened build for production. Run PHP‑FPM behind Nginx, connect to MySQL/Postgres and Redis, toggle Xdebug when needed, and ship a small, cache‑friendly image.&lt;/p&gt;
&lt;h2 id="components"&gt;Components&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PHP‑FPM container for the application&lt;/li&gt;
&lt;li&gt;Nginx container as the HTTP entry point&lt;/li&gt;
&lt;li&gt;MySQL or Postgres, plus Redis&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;docker-compose.yml&lt;/code&gt; for development with bind mounts&lt;/li&gt;
&lt;li&gt;A multi‑stage Dockerfile for a compact production image&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="project-layout"&gt;Project layout&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;app/ # your Laravel app code
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker/
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; nginx/
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; default.conf
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Dockerfile
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker-compose.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="dockerfile-multistage"&gt;Dockerfile (multi‑stage)&lt;/h2&gt;
&lt;p&gt;Build dependencies once, then copy only what you need into the runtime image. Enable OPcache for production; allow an Xdebug toggle for local work.&lt;/p&gt;</description></item><item><title>Avoiding Fatal Mistakes</title><link>https://www.buanacoding.com/2025/09/laravel-database-migration-best-practices.html</link><pubDate>Mon, 15 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-database-migration-best-practices.html</guid><description>&lt;p&gt;Migrations let you evolve your schema alongside the code. Done well, they are repeatable and safe. Done poorly, they lock tables, drop data, and take your site down. This guide focuses on practical patterns that reduce risk in production and make rollouts predictable.&lt;/p&gt;
&lt;h2 id="ground-rules"&gt;Ground rules&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Treat migrations as immutable once deployed. If a mistake gets to production, add a new migration to correct it instead of editing history.&lt;/li&gt;
&lt;li&gt;Keep schema and data changes separate. Data backfills belong in their own migration or a job/command so you can control runtime and retries.&lt;/li&gt;
&lt;li&gt;Don’t rely on application models inside migrations. Models can drift as your app evolves. Prefer &lt;code&gt;DB::table()&lt;/code&gt; or raw SQL that doesn’t depend on future code.&lt;/li&gt;
&lt;li&gt;Test locally and in staging with the same DB engine and major version you run in production.&lt;/li&gt;
&lt;li&gt;Always run with &lt;code&gt;php artisan migrate --force&lt;/code&gt; in CI/production. Check status with &lt;code&gt;php artisan migrate:status&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="naming-and-versioning"&gt;Naming and versioning&lt;/h2&gt;
&lt;p&gt;Use descriptive names that read like a change log: &lt;code&gt;2025_09_15_100001_add_status_to_orders_table.php&lt;/code&gt;. One concern per migration. If a change requires several steps (add column → backfill → enforce NOT NULL), use separate migrations in the right order.&lt;/p&gt;</description></item><item><title>Laravel API Authentication with Sanctum Complete Tutorial 2025</title><link>https://www.buanacoding.com/2025/09/laravel-api-authentication-sanctum-2025.html</link><pubDate>Sun, 14 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-api-authentication-sanctum-2025.html</guid><description>&lt;p&gt;Laravel Sanctum offers two simple authentication modes that cover most applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cookie-based auth for SPAs that live on the same top-level domain as your backend.&lt;/li&gt;
&lt;li&gt;Personal access tokens for mobile apps, third‑party clients, or server‑to‑server use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial walks through both flows end‑to‑end, including the necessary configuration (CORS, cookies, stateful domains), how to issue and revoke tokens, how to protect routes, and how to test the result. You’ll also find production notes to avoid common pitfalls.&lt;/p&gt;</description></item><item><title>How to Fix Common Laravel Errors Complete Troubleshooting Guide for Developers</title><link>https://www.buanacoding.com/2025/09/how-to-fix-common-laravel-errors.html</link><pubDate>Sat, 13 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/how-to-fix-common-laravel-errors.html</guid><description>&lt;p&gt;Laravel applications fail for a handful of predictable reasons: missing or stale configuration, broken cache, database schema drift, misconfigured cookies, permissions, or plain coding mistakes. The sections below show fast, reliable ways to identify the root cause and ship a clean fix without guesswork.&lt;/p&gt;
&lt;h2 id="start-with-a-clean-baseline"&gt;Start with a clean baseline&lt;/h2&gt;
&lt;p&gt;Run these commands from the project root to eliminate stale build artifacts before you investigate further:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;php artisan cache:clear
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;php artisan config:clear
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;php artisan route:clear
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;php artisan view:clear
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;composer dump-autoload -o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the problem is related to file permissions (very common after deploy), follow the safe defaults in this companion article: &lt;a href="https://www.buanacoding.com/2025/09/fix-laravel-permission-issues-production.html"&gt;
 Fix Laravel Permission Issues
&lt;/a&gt;
.&lt;/p&gt;</description></item><item><title>Fixing Laravel Session and Cache Issues Complete Troubleshooting Guide</title><link>https://www.buanacoding.com/2025/09/fixing-laravel-session-cache-issues.html</link><pubDate>Fri, 12 Sep 2025 12:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/fixing-laravel-session-cache-issues.html</guid><description>&lt;p&gt;Sessions and cache power many core features in Laravel—from authentication to performance. When they break, symptoms can be confusing: users get logged out randomly, “remember me” does nothing, flash messages disappear, or recent cache writes don’t show up. Use the checklist below to quickly find and fix the cause.&lt;/p&gt;
&lt;h2 id="how-sessions-and-cache-fail"&gt;How sessions and cache fail&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sessions persist state across requests. Laravel can store them in files, database, Redis, Memcached, or array (for tests). If the storage can’t be written or the cookie can’t be read back, the user appears “logged out”.&lt;/li&gt;
&lt;li&gt;Cache stores computed data for speed. If the driver points to a different backend than you expect, or the key gets namespaced differently, you’ll read stale or missing values.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="quick-fixes-that-solve-most-cases"&gt;Quick fixes that solve most cases&lt;/h2&gt;
&lt;p&gt;Run these from your app root (adjust user/group):&lt;/p&gt;</description></item><item><title>Laravel Environment Configuration Fixing .env and Config Cache Issues</title><link>https://www.buanacoding.com/2025/09/laravel-environment-configuration-env-issues.html</link><pubDate>Fri, 12 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-environment-configuration-env-issues.html</guid><description>&lt;p&gt;Env problems often show up right after a deploy or a cache command: the app works locally but fails in production with “No application encryption key has been specified”, wrong database credentials, missing API keys, or stale config even after you edited &lt;code&gt;.env&lt;/code&gt;. This happens because of how Laravel loads environment variables and how config caching freezes values.&lt;/p&gt;
&lt;h2 id="how-laravel-reads-environment-variables"&gt;How Laravel reads environment variables&lt;/h2&gt;
&lt;p&gt;Laravel reads environment variables in two ways:&lt;/p&gt;</description></item><item><title>Fix Laravel Permission Issues Solving 403 and 500 Errors on Production Server</title><link>https://www.buanacoding.com/2025/09/fix-laravel-permission-issues-production.html</link><pubDate>Thu, 11 Sep 2025 08:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/fix-laravel-permission-issues-production.html</guid><description>&lt;p&gt;If a fresh deploy returns 403 or 500, the cause is usually predictable: wrong ownership/permissions, web server misconfig, missing PHP extensions, or SELinux. Use the checklist below to find and fix it quickly. Examples cover Ubuntu/Debian (Nginx/Apache with PHP‑FPM) and CentOS/RHEL (SELinux).&lt;/p&gt;
&lt;h2 id="why-403-vs-500"&gt;Why 403 vs 500&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;403 Forbidden from the web server: The server blocked access before Laravel ran. Common causes: wrong document root (not pointing to &lt;code&gt;public/&lt;/code&gt;), missing &lt;code&gt;try_files&lt;/code&gt;, directory or file not readable, SELinux contexts, or a security module (WAF/mod_security/Cloudflare) rejecting the request.&lt;/li&gt;
&lt;li&gt;403 from Laravel: Authorization middleware/policies, CSRF token failures, or custom gates deny the action.&lt;/li&gt;
&lt;li&gt;500 Internal Server Error: PHP crashed or threw an exception. Common causes: wrong permissions on &lt;code&gt;storage/&lt;/code&gt; or &lt;code&gt;bootstrap/cache&lt;/code&gt;, missing PHP extensions, invalid &lt;code&gt;.env&lt;/code&gt;, wrong &lt;code&gt;APP_KEY&lt;/code&gt;, or syntax/runtime errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="quick-fix-checklist-safe-defaults"&gt;Quick fix checklist (safe defaults)&lt;/h2&gt;
&lt;p&gt;Run these commands from your project root (adjust the PHP‑FPM user for your distro):&lt;/p&gt;</description></item><item><title>15 Essential Techniques for Fast Applications</title><link>https://www.buanacoding.com/2025/09/laravel-performance-optimization-15-techniques.html</link><pubDate>Mon, 08 Sep 2025 12:30:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-performance-optimization-15-techniques.html</guid><description>&lt;p&gt;Performance optimization is crucial for creating successful Laravel applications that provide excellent user experiences. Slow applications frustrate users, hurt SEO rankings, and can significantly impact business revenue. This comprehensive guide covers 15 proven techniques to dramatically improve your Laravel application&amp;rsquo;s performance.&lt;/p&gt;
&lt;p&gt;Modern web users expect applications to load quickly and respond instantly to interactions. Studies show that even a one-second delay in page load time can reduce conversions by 7%. Laravel provides powerful tools and features to help you build fast applications, but knowing how to use them effectively makes all the difference.&lt;/p&gt;</description></item><item><title>Complete Production Security Guide</title><link>https://www.buanacoding.com/2025/09/laravel-security-best-practices-production.html</link><pubDate>Mon, 08 Sep 2025 12:15:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-security-best-practices-production.html</guid><description>&lt;p&gt;Security is paramount when deploying Laravel applications to production environments. A single vulnerability can compromise user data, damage your reputation, and result in significant financial losses. This comprehensive guide covers essential security practices to protect your Laravel applications from common threats and vulnerabilities.&lt;/p&gt;
&lt;p&gt;Laravel provides excellent security features out of the box, but proper implementation and additional security measures are crucial for production deployments. From authentication and authorization to data protection and server hardening, every layer of your application stack requires careful attention to security details.&lt;/p&gt;</description></item><item><title>Clean Code Laravel Project Structure and Design Patterns Guide</title><link>https://www.buanacoding.com/2025/09/clean-code-laravel-project-structure.html</link><pubDate>Mon, 08 Sep 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/clean-code-laravel-project-structure.html</guid><description>&lt;p&gt;Writing clean, maintainable code in Laravel applications requires more than just understanding the framework&amp;rsquo;s features. It demands a systematic approach to organizing your project structure, implementing proven design patterns, and following established best practices that make your codebase scalable and readable.&lt;/p&gt;
&lt;p&gt;Laravel provides excellent flexibility, but this freedom can sometimes lead to messy codebases if developers don&amp;rsquo;t establish clear conventions early on. This comprehensive guide will walk you through proven strategies for creating professional Laravel applications that are easy to maintain, test, and scale.&lt;/p&gt;</description></item><item><title>Advanced Laravel Debugging with Logs Production Issues Troubleshooting</title><link>https://www.buanacoding.com/2025/09/advanced-laravel-debugging-with-logs.html</link><pubDate>Sat, 06 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/advanced-laravel-debugging-with-logs.html</guid><description>&lt;p&gt;When your Laravel application starts acting up in production, proper logging becomes your lifeline. Unlike development environments where you can use tools like dd() or dump(), production debugging requires a more sophisticated approach. This comprehensive guide walks you through advanced Laravel debugging techniques using logs that will help you identify, track, and resolve production issues efficiently.&lt;/p&gt;
&lt;h2 id="understanding-laravels-logging-architecture"&gt;Understanding Laravel&amp;rsquo;s Logging Architecture&lt;/h2&gt;
&lt;p&gt;Laravel provides a robust logging system built on top of the Monolog library. The framework offers multiple logging channels, each designed for specific use cases. Before diving into advanced debugging techniques, you need to understand how Laravel handles logging under the hood.&lt;/p&gt;</description></item><item><title>Private Repos, Semantic Import v2+, and go.work</title><link>https://www.buanacoding.com/2025/09/advanced-go-modules-private-repos-semantic-import-v2-go-work.html</link><pubDate>Tue, 02 Sep 2025 19:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/advanced-go-modules-private-repos-semantic-import-v2-go-work.html</guid><description>&lt;p&gt;Go modules revolutionized dependency management in the Go ecosystem when they were introduced in Go 1.11. While most developers are familiar with basic module operations like &lt;code&gt;go mod init&lt;/code&gt; and &lt;code&gt;go get&lt;/code&gt;, there are several advanced features that can significantly improve your development workflow. In this comprehensive guide, we&amp;rsquo;ll explore three critical advanced concepts: working with private repositories, handling semantic import versioning v2 and beyond, and leveraging go.work for multi-module projects.&lt;/p&gt;</description></item><item><title>Computer Vision with OpenCV Complete Guide to Object Detection and Face Recognition in Python</title><link>https://www.buanacoding.com/2025/09/computer-vision-opencv-object-detection-face-recognition-tutorial.html</link><pubDate>Tue, 02 Sep 2025 00:00:00 +0000</pubDate><guid>https://www.buanacoding.com/2025/09/computer-vision-opencv-object-detection-face-recognition-tutorial.html</guid><description>&lt;p&gt;Ever wondered how your phone instantly recognizes your face to unlock, or how Tesla&amp;rsquo;s autopilot spots other cars on the highway? That&amp;rsquo;s computer vision at work, and honestly, it&amp;rsquo;s not as complicated as it looks. When I first managed to get a webcam to detect my face in real-time, I was blown away. It felt like I&amp;rsquo;d just taught my computer to see.&lt;/p&gt;
&lt;p&gt;The crazy thing is, you can build this stuff yourself. No PhD required, no expensive equipment - just Python, OpenCV, and some patience. I&amp;rsquo;ve been working with computer vision for a few years now, and I still get excited every time I see a detection algorithm actually work on messy, real-world data.&lt;/p&gt;</description></item><item><title>The Complete Guide to slog (Go 1.21+) Modern Structured Logging in Go (2025)</title><link>https://www.buanacoding.com/2025/09/complete-guide-slog-go-structured-logging-2025.html</link><pubDate>Mon, 01 Sep 2025 08:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/complete-guide-slog-go-structured-logging-2025.html</guid><description>&lt;p&gt;Go 1.21 introduced &lt;code&gt;log/slog&lt;/code&gt;, a standard structured logging API that finally brings first‑class JSON and attribute‑based logging to the standard library. If you’ve used &lt;code&gt;zap&lt;/code&gt; or &lt;code&gt;logrus&lt;/code&gt;, the core ideas will feel familiar—just simpler and standardized.&lt;/p&gt;
&lt;p&gt;This guide takes you from zero to production-ready logging with &lt;code&gt;slog&lt;/code&gt;. We&amp;rsquo;ll start with basic setup, then gradually build up to advanced patterns like HTTP middleware, security, testing, and observability integration. Each section includes working examples you can run immediately.&lt;/p&gt;</description></item><item><title>10 Best AI Coding Assistants Every Developer Should Try in 2025</title><link>https://www.buanacoding.com/2025/08/10-best-ai-coding-assistants-every-developer-should-try-2025.html</link><pubDate>Sun, 31 Aug 2025 15:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/10-best-ai-coding-assistants-every-developer-should-try-2025.html</guid><description>&lt;p&gt;The way we write code is changing dramatically. AI coding assistants have moved from experimental tools to essential companions that can genuinely transform your development workflow. I&amp;rsquo;ve been testing AI coding tools since they first emerged, and honestly, the progress in 2025 has been mind-blowing.&lt;/p&gt;
&lt;p&gt;What used to take hours of debugging, researching documentation, or writing boilerplate code can now be done in minutes. But with so many AI coding assistants flooding the market, choosing the right one feels overwhelming. That&amp;rsquo;s why I&amp;rsquo;ve spent months testing every major AI coding tool to bring you this comprehensive guide.&lt;/p&gt;</description></item><item><title>Essential Linux Commands Every Developer Must Know in 2025</title><link>https://www.buanacoding.com/2025/08/essential-linux-commands-every-developer-must-know-2025.html</link><pubDate>Sun, 31 Aug 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/essential-linux-commands-every-developer-must-know-2025.html</guid><description>&lt;p&gt;Whether you&amp;rsquo;re building web applications, managing servers, or working in DevOps, mastering Linux commands is absolutely essential for any developer in 2025. I&amp;rsquo;ve been working with Linux systems for years, and I can tell you that knowing the right commands at the right time can save you hours of work and make you incredibly productive.&lt;/p&gt;
&lt;p&gt;Linux dominates the server world, powers most cloud infrastructure, and is the backbone of modern development environments. From managing &lt;a href="https://www.buanacoding.com/2025/08/install-docker-on-ubuntu-24-04-with-compose-v2-and-rootless.html"&gt;
 Docker containers
&lt;/a&gt;
 to setting up &lt;a href="https://www.buanacoding.com/2025/08/nginx-certbot-ubuntu-24-04-free-https.html"&gt;
 secure web servers with HTTPS
&lt;/a&gt;
, these commands will be your daily companions.&lt;/p&gt;</description></item><item><title>gRPC in Go Complete Guide from Basics to Production Ready Services</title><link>https://www.buanacoding.com/2025/08/grpc-in-go-complete-guide-from-basics-to-production.html</link><pubDate>Thu, 28 Aug 2025 00:00:00 +0000</pubDate><guid>https://www.buanacoding.com/2025/08/grpc-in-go-complete-guide-from-basics-to-production.html</guid><description>&lt;p&gt;Building modern distributed systems is tricky business - you need services that can talk to each other quickly and reliably. That&amp;rsquo;s where gRPC comes in and absolutely crushes it. I&amp;rsquo;ve been building REST APIs for years, but when I first tried gRPC, it was like switching from a bicycle to a sports car. The speed difference is insane, plus you get type safety and can use it with practically any programming language.&lt;/p&gt;</description></item><item><title>10 Essential VS Code Extensions Every Developer Must Have in 2025</title><link>https://www.buanacoding.com/2025/08/10-essential-vscode-extensions-developers-2025.html</link><pubDate>Tue, 26 Aug 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/10-essential-vscode-extensions-developers-2025.html</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Let&amp;rsquo;s be honest – vanilla Visual Studio Code is good, but it&amp;rsquo;s not &lt;em&gt;amazing&lt;/em&gt;. What makes this popular code editor truly shine are the extensions that turn it into a powerhouse IDE. After years of coding and trying countless extensions, I&amp;rsquo;ve narrowed down the absolute essentials that every developer should have installed in 2025.&lt;/p&gt;
&lt;p&gt;Whether you&amp;rsquo;re a seasoned developer or just starting your coding journey, these extensions will save you hours of work, catch bugs before they happen, and make your coding experience so much smoother. Let&amp;rsquo;s dive into the tools that have become indispensable in modern development.&lt;/p&gt;</description></item><item><title>FastAPI Tutorial Build REST API from Scratch (Beginner Guide)</title><link>https://www.buanacoding.com/2025/08/fastapi-tutorial-build-rest-api-from-scratch-beginner-guide.html</link><pubDate>Mon, 25 Aug 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/fastapi-tutorial-build-rest-api-from-scratch-beginner-guide.html</guid><description>&lt;p&gt;Building APIs used to scare me when I first started programming. There&amp;rsquo;s so much to learn - databases, HTTP methods, authentication, error handling. But FastAPI changed everything for me. It&amp;rsquo;s like having training wheels that actually make you faster, not slower.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to build a real Book Library API from the ground up. No fluff, no complicated setups - just practical, working code that you can understand and expand on. By the end of this guide, you&amp;rsquo;ll have a fully functional REST API that can handle creating, reading, updating, and deleting books.&lt;/p&gt;</description></item><item><title>Deploy Laravel to VPS with Nginx Complete Production Guide</title><link>https://www.buanacoding.com/2025/08/deploy-laravel-to-vps-with-nginx-complete-guide.html</link><pubDate>Sun, 24 Aug 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/deploy-laravel-to-vps-with-nginx-complete-guide.html</guid><description>&lt;p&gt;Deploying a Laravel application to a VPS (Virtual Private Server) with Nginx gives you complete control over your hosting environment and superior performance compared to shared hosting. This comprehensive guide will walk you through the entire process, from server setup to production optimization.&lt;/p&gt;
&lt;h2 id="what-youll-learn"&gt;What You&amp;rsquo;ll Learn&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Set up a VPS for Laravel deployment&lt;/li&gt;
&lt;li&gt;Configure Nginx for optimal Laravel performance&lt;/li&gt;
&lt;li&gt;Secure your application with SSL certificates&lt;/li&gt;
&lt;li&gt;Implement production best practices&lt;/li&gt;
&lt;li&gt;Set up automated deployments&lt;/li&gt;
&lt;li&gt;Monitor and maintain your application&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before starting, ensure you have:&lt;/p&gt;</description></item><item><title>Uninstall Docker on Ubuntu 24.04 Complete Clean Removal</title><link>https://www.buanacoding.com/2025/08/uninstall-docker-ubuntu-24-04-clean-removal.html</link><pubDate>Sat, 23 Aug 2025 13:30:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/uninstall-docker-ubuntu-24-04-clean-removal.html</guid><description>&lt;p&gt;Need to remove Docker from Ubuntu 24.04 (Noble) cleanly? This guide shows a safe, step‑by‑step removal that gets rid of the Engine, Compose v2 plugin, configs, and data — plus optional rootless Docker cleanup. If you plan to reinstall after this, see: &lt;a href="https://www.buanacoding.com/2025/08/install-docker-on-ubuntu-24-04-with-compose-v2-and-rootless.html"&gt;
 Install Docker on Ubuntu 24.04: Post‑Install, Rootless, and Compose v2
&lt;/a&gt;
. For HTTPS and reverse proxy, see: &lt;a href="https://www.buanacoding.com/2025/08/nginx-certbot-ubuntu-24-04-free-https.html"&gt;
 Nginx + Certbot on Ubuntu 24.04: Free HTTPS with Let’s Encrypt
&lt;/a&gt;
.&lt;/p&gt;</description></item><item><title>What Are Passkeys? How to Enable Them on Google, Apple, and Password Managers (2025 Guide)</title><link>https://www.buanacoding.com/2025/08/what-are-passkeys-how-to-enable-google-apple-password-managers.html</link><pubDate>Fri, 22 Aug 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/what-are-passkeys-how-to-enable-google-apple-password-managers.html</guid><description>&lt;p&gt;Passkeys are increasingly supported across major platforms. They enable fast, convenient logins without passwords and are resistant to phishing. No more weak passwords or OTP codes hijacked via SIM swaps. This guide explains how passkeys work, compares them with legacy 2FA, and shows how to enable them on Google and Apple or use them with password managers like 1Password and Bitwarden.&lt;/p&gt;
&lt;h2 id="summary-what-is-a-passkey"&gt;Summary: What Is a Passkey?&lt;/h2&gt;
&lt;p&gt;A passkey is a passwordless credential based on FIDO2/WebAuthn. Instead of typing a shared secret, you prove possession of a private cryptographic key securely stored on your device (or in a compatible password manager). When you log in, the site/app sends a challenge that only your private key can sign. The server verifies the signature with the public key you registered. No shared secret travels over the network.&lt;/p&gt;</description></item><item><title>Phishing Signs, Fake Email Examples, and How to Avoid Them (2025 Guide)</title><link>https://www.buanacoding.com/2025/08/phishing-signs-fake-email-examples-how-to-avoid.html</link><pubDate>Wed, 20 Aug 2025 00:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/phishing-signs-fake-email-examples-how-to-avoid.html</guid><description>&lt;p&gt;Staying safe online is getting harder. Scammers use convincing emails, text messages, websites, and even mobile apps to trick people into giving away passwords, banking details, or installing malware. This plain-English guide explains the most common phishing signs, shows realistic (safe) examples, and gives you clear steps to protect yourself.&lt;/p&gt;
&lt;h2 id="what-is-phishing"&gt;What Is Phishing?&lt;/h2&gt;
&lt;p&gt;Phishing is a social-engineering attack where criminals pretend to be a trusted brand, coworker, or service (bank, delivery company, marketplace, government agency) to make you click a link, open a file, or share sensitive information. Modern phishing blends good design with urgency (“Your account will be closed in 24 hours!”) so you act before thinking.&lt;/p&gt;</description></item><item><title>FastAPI JWT Auth with OAuth2 Password Flow (Pydantic v2 + SQLAlchemy 2.0)</title><link>https://www.buanacoding.com/2025/08/fastapi-jwt-auth-oauth2-password-flow-pydantic-v2-sqlalchemy-2.html</link><pubDate>Wed, 20 Aug 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/fastapi-jwt-auth-oauth2-password-flow-pydantic-v2-sqlalchemy-2.html</guid><description>&lt;p&gt;Looking to add login to your FastAPI app without pulling in a full auth service? Here’s a small, production‑friendly setup. We’ll build username/password authentication with the OAuth2 Password flow and JSON Web Tokens (JWTs) for stateless access. It uses Pydantic v2 for validation and SQLAlchemy 2.0 for persistence. You’ll hash passwords properly, create/verify tokens, protect routes, and test everything end‑to‑end.&lt;/p&gt;
&lt;p&gt;If you’re deploying the finished app on Ubuntu with HTTPS, check the deployment guide: &lt;a href="https://www.buanacoding.com/2025/08/deploy-fastapi-ubuntu-24-04-gunicorn-nginx-certbot.html"&gt;
 Deploy FastAPI on Ubuntu 24.04: Gunicorn + Nginx + Certbot
&lt;/a&gt;
.&lt;/p&gt;</description></item><item><title>Install Ollama and Open WebUI on Ubuntu 24.04 Local AI (CPU/GPU)</title><link>https://www.buanacoding.com/2025/08/install-ollama-openwebui-ubuntu-24-04.html</link><pubDate>Tue, 19 Aug 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/install-ollama-openwebui-ubuntu-24-04.html</guid><description>&lt;p&gt;If you want to run AI models locally on Ubuntu 24.04 with a clean web UI, this guide is for you. We’ll install &lt;a href="https://ollama.com" target="_blank" rel="nofollow noopener noreferrer"&gt;
 Ollama
&lt;/a&gt;
, pull a model, and use &lt;a href="https://github.com/open-webui/open-webui" target="_blank" rel="nofollow noopener noreferrer"&gt;
 Open WebUI
&lt;/a&gt;
 for a modern chat interface. The steps cover CPU‑only and NVIDIA GPU notes, optional systemd services, and practical troubleshooting.&lt;/p&gt;
&lt;p&gt;What you&amp;rsquo;ll do&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install Ollama on Ubuntu 24.04 (Noble)&lt;/li&gt;
&lt;li&gt;Pull and run a starter model (e.g., &lt;code&gt;llama3.1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Run Open WebUI (Docker) and connect to Ollama&lt;/li&gt;
&lt;li&gt;Optionally enable NVIDIA GPU acceleration (CUDA)&lt;/li&gt;
&lt;li&gt;Set up systemd services and basic hardening tips&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites&lt;/p&gt;</description></item><item><title>Stop Reusing Passwords A Practical Guide to Password Managers</title><link>https://www.buanacoding.com/2025/08/stop-reusing-passwords-practical-password-manager-guide.html</link><pubDate>Mon, 18 Aug 2025 01:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/stop-reusing-passwords-practical-password-manager-guide.html</guid><description>&lt;p&gt;If you reuse passwords, the internet is quietly stacking odds against you. One small site gets breached, your email and password leak, and attackers try the same combo on your email, banking, cloud storage—everywhere. That “I’ll remember it” system works right up until it doesn’t. The fix isn’t superhuman memory; it’s outsourcing the problem to a tool designed for it: a password manager.&lt;/p&gt;
&lt;p&gt;What a password manager actually does&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generates strong, unique passwords for every account&lt;/li&gt;
&lt;li&gt;Stores them encrypted, synced across your devices&lt;/li&gt;
&lt;li&gt;Auto‑fills only on the correct websites/apps&lt;/li&gt;
&lt;li&gt;Audits your vault for weak/reused/compromised passwords&lt;/li&gt;
&lt;li&gt;Holds secure notes, TOTP codes (in some apps), and sometimes passkeys&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The goal is simple: every account gets its own high‑entropy secret, and you never type or remember it again.&lt;/p&gt;</description></item><item><title>Deploy FastAPI on Ubuntu 24.04 Gunicorn + Nginx + Certbot (HTTPS)</title><link>https://www.buanacoding.com/2025/08/deploy-fastapi-ubuntu-24-04-gunicorn-nginx-certbot.html</link><pubDate>Fri, 15 Aug 2025 18:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/deploy-fastapi-ubuntu-24-04-gunicorn-nginx-certbot.html</guid><description>&lt;p&gt;Want to deploy FastAPI on Ubuntu 24.04 with a clean, secure, and maintainable setup? This guide walks you through running Gunicorn (ASGI server), Nginx (reverse proxy), and free HTTPS from Let’s Encrypt using Certbot. We’ll also use systemd so your service starts on boot and is easy to restart after updates.&lt;/p&gt;
&lt;p&gt;What you’ll build:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A minimal FastAPI project structure&lt;/li&gt;
&lt;li&gt;Running the app with Gunicorn (Uvicorn worker)&lt;/li&gt;
&lt;li&gt;A systemd service for start/stop/restart&lt;/li&gt;
&lt;li&gt;Nginx reverse proxy to Gunicorn&lt;/li&gt;
&lt;li&gt;HTTPS (Certbot) with auto‑renewal&lt;/li&gt;
&lt;li&gt;UFW firewall (open 80/443), logs, and troubleshooting tips&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 24.04 server (sudo access)&lt;/li&gt;
&lt;li&gt;A domain pointing to the server (A/AAAA records)&lt;/li&gt;
&lt;li&gt;Python 3.10+ (Ubuntu 24.04 default is fine)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Prepare the project structure on the server&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;A tidy layout makes automation easier.&lt;/p&gt;</description></item><item><title>Nginx + Certbot on Ubuntu 24.04 Free HTTPS with Let’s Encrypt</title><link>https://www.buanacoding.com/2025/08/nginx-certbot-ubuntu-24-04-free-https.html</link><pubDate>Fri, 15 Aug 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/nginx-certbot-ubuntu-24-04-free-https.html</guid><description>&lt;p&gt;Want a free, trusted HTTPS certificate for your site on Ubuntu 24.04? This guide walks you through installing Nginx, opening the right firewall ports, issuing a free Let’s Encrypt certificate with Certbot, enabling automatic renewal, forcing HTTP→HTTPS redirects, and applying sane TLS settings. You’ll also see common troubleshooting steps and how to test your configuration. If you need to containerize your apps first, set up Docker here: &lt;a href="https://www.buanacoding.com/2025/08/install-docker-on-ubuntu-24-04-with-compose-v2-and-rootless.html"&gt;
 Install Docker on Ubuntu 24.04: Post-Install, Rootless, and Compose v2
&lt;/a&gt;
&lt;/p&gt;</description></item><item><title>Install Docker on Ubuntu 24.04 Post-Install, Rootless, and Compose v2</title><link>https://www.buanacoding.com/2025/08/install-docker-on-ubuntu-24-04-with-compose-v2-and-rootless.html</link><pubDate>Thu, 14 Aug 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/install-docker-on-ubuntu-24-04-with-compose-v2-and-rootless.html</guid><description>&lt;p&gt;This guide shows how to install Docker Engine on Ubuntu 24.04 LTS (Noble Numbat), configure it for non-root use, enable optional rootless mode, and use Docker Compose v2. It also includes test commands, common troubleshooting tips, and how to uninstall cleanly. For securing your site with HTTPS, see: &lt;a href="https://www.buanacoding.com/2025/08/nginx-certbot-ubuntu-24-04-free-https.html"&gt;
 Nginx + Certbot on Ubuntu 24.04
&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;What you’ll do&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the official Docker repository for Ubuntu 24.04 (Noble)&lt;/li&gt;
&lt;li&gt;Install Docker Engine, Buildx, and Compose v2 plugins&lt;/li&gt;
&lt;li&gt;Run Docker as your regular user (without sudo)&lt;/li&gt;
&lt;li&gt;Optionally enable rootless Docker&lt;/li&gt;
&lt;li&gt;Verify with test containers and fix common errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites&lt;/p&gt;</description></item><item><title>Connecting to PostgreSQL in Go using sqlx</title><link>https://www.buanacoding.com/2025/05/connecting-postgresql-in-go-using-sqlx.html</link><pubDate>Sun, 25 May 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/05/connecting-postgresql-in-go-using-sqlx.html</guid><description>&lt;p&gt;In modern web applications, storing and retrieving data from a database is a fundamental requirement. Go provides a low-level database/sql package, but using it directly can be verbose and repetitive. Thankfully, sqlx extends database/sql by adding useful features like struct scanning and named queries, making database operations in Go much easier.&lt;/p&gt;
&lt;p&gt;In this article, we’ll walk through how to connect a Go application to a PostgreSQL database using sqlx, and how to perform basic CRUD operations.&lt;/p&gt;</description></item><item><title>Structuring Go Projects Clean Project Structure and Best Practices</title><link>https://www.buanacoding.com/2025/05/structuring-go-projects-clean-project-structure-and-best-practices.html</link><pubDate>Sun, 18 May 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/05/structuring-go-projects-clean-project-structure-and-best-practices.html</guid><description>&lt;p&gt;When you start building larger applications in Go, having a clean and maintainable project structure is essential. Unlike some other languages or frameworks that enforce certain patterns, Go gives you a lot of freedom in how you organize your code. While this is powerful, it can also lead to messy projects if not handled carefully.&lt;/p&gt;
&lt;p&gt;In this guide, we&amp;rsquo;ll explore how to structure Go projects following clean architecture principles and best practices that many professional Go developers use.&lt;/p&gt;</description></item><item><title>How to Build a REST API in Go using net/http</title><link>https://www.buanacoding.com/2025/05/how-to-build-a-rest-api-in-go-using-net-http.html</link><pubDate>Sun, 11 May 2025 08:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/05/how-to-build-a-rest-api-in-go-using-net-http.html</guid><description>&lt;p&gt;Building a REST API in Go is one of the most practical ways to learn how Go handles HTTP servers, &lt;a href="https://www.buanacoding.com/2025/04/working-with-json-in-go-encode-decode.html"&gt;
 JSON
&lt;/a&gt;
, and struct-based logic. In this tutorial, you’ll learn how to create a simple RESTful API using the standard net/http package—without using any third-party frameworks. This is a great starting point before moving to more complex architectures.&lt;/p&gt;
&lt;p&gt;In this guide, we’ll create a simple API for managing books. Each book will have an ID, title, and author.&lt;/p&gt;</description></item><item><title>Working with JSON in Go - Encode and Decode</title><link>https://www.buanacoding.com/2025/04/working-with-json-in-go-encode-decode.html</link><pubDate>Wed, 30 Apr 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/working-with-json-in-go-encode-decode.html</guid><description>&lt;p&gt;JSON (JavaScript Object Notation) is a widely used data format in APIs and web applications. Go provides strong support for JSON through the standard &lt;code&gt;encoding/json&lt;/code&gt; package. In this article, you’ll learn how to parse JSON into structs, generate JSON from Go data, use struct tags, and work with nested or dynamic structures.&lt;/p&gt;
&lt;p&gt;In this article, you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to encode Go structs to JSON&lt;/li&gt;
&lt;li&gt;How to decode JSON into Go structs&lt;/li&gt;
&lt;li&gt;Using JSON tags to customize field names&lt;/li&gt;
&lt;li&gt;Working with maps and dynamic JSON&lt;/li&gt;
&lt;li&gt;Handling nested JSON structures&lt;/li&gt;
&lt;li&gt;Best practices and error handling&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="encoding-structs-to-json"&gt;Encoding Structs to JSON&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;json.Marshal&lt;/code&gt; to convert Go structs into JSON strings:&lt;/p&gt;</description></item><item><title>Read, Write, and Manage Files</title><link>https://www.buanacoding.com/2025/04/file-handling-in-go-read-write-and.html</link><pubDate>Tue, 29 Apr 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/file-handling-in-go-read-write-and.html</guid><description>&lt;p&gt;In Go, file handling is straightforward and powerful. You can create, read, write, and manage files using standard packages like &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;io&lt;/code&gt;, and &lt;code&gt;ioutil&lt;/code&gt; (deprecated but still common). Understanding how to work with files is essential when building CLI tools, web servers, or any application that deals with local data.&lt;/p&gt;
&lt;p&gt;In this article, you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to create and write to a file&lt;/li&gt;
&lt;li&gt;How to read a file&lt;/li&gt;
&lt;li&gt;Appending data to files&lt;/li&gt;
&lt;li&gt;Working with directories&lt;/li&gt;
&lt;li&gt;Checking if a file exists&lt;/li&gt;
&lt;li&gt;Best practices and error handling&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="creating-and-writing-to-a-file"&gt;Creating and Writing to a File&lt;/h2&gt;
&lt;p&gt;To create and write content to a file:&lt;/p&gt;</description></item><item><title>Using sync.Mutex and sync.Once</title><link>https://www.buanacoding.com/2025/04/synchronizing-goroutines-in-go-using.html</link><pubDate>Mon, 28 Apr 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/synchronizing-goroutines-in-go-using.html</guid><description>&lt;p&gt;When you write concurrent programs in Go, multiple goroutines may try to access and modify the same data at the same time. Without proper synchronization, this leads to race conditions, bugs, or crashes. Go provides tools like &lt;code&gt;sync.Mutex&lt;/code&gt;, &lt;code&gt;sync.RWMutex&lt;/code&gt;, and &lt;code&gt;sync.Once&lt;/code&gt; to safely share data across goroutines.&lt;/p&gt;
&lt;p&gt;In this article, you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What race conditions are and how to avoid them&lt;/li&gt;
&lt;li&gt;How to use &lt;code&gt;sync.Mutex&lt;/code&gt; to protect data&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;sync.RWMutex&lt;/code&gt; for read-write access&lt;/li&gt;
&lt;li&gt;How &lt;code&gt;sync.Once&lt;/code&gt; ensures code runs only once&lt;/li&gt;
&lt;li&gt;Real-world examples and best practices&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-a-race-condition"&gt;What Is a Race Condition?&lt;/h2&gt;
&lt;p&gt;A race condition happens when two or more goroutines access the same variable at the same time, and at least one of them is modifying it. This can cause unexpected behavior or corrupted data.&lt;/p&gt;</description></item><item><title>Using Context in Go - Cancellation</title><link>https://www.buanacoding.com/2025/04/using-context-in-go-cancellation.html</link><pubDate>Sun, 27 Apr 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/using-context-in-go-cancellation.html</guid><description>&lt;p&gt;As your Go applications become more concurrent and complex, you&amp;rsquo;ll need a way to manage the lifecycle of your goroutines—especially when you want to cancel them, set timeouts, or propagate deadlines. This is where the &lt;code&gt;context&lt;/code&gt; package comes in. It&amp;rsquo;s the idiomatic way in Go to control concurrent processes gracefully and reliably.&lt;/p&gt;
&lt;p&gt;In this article, you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What &lt;code&gt;context&lt;/code&gt; is and why it’s important&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;context.Background()&lt;/code&gt; and &lt;code&gt;context.TODO()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;How to cancel a goroutine with &lt;code&gt;context.WithCancel()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;How to set a timeout or deadline&lt;/li&gt;
&lt;li&gt;How to check if a context is done&lt;/li&gt;
&lt;li&gt;Real-world examples and best practices&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-context"&gt;What Is Context?&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;context&lt;/code&gt; package provides a way to carry deadlines, cancellation signals, and other request-scoped values across function boundaries and between goroutines.&lt;/p&gt;</description></item><item><title>Goroutines and Channels Explained</title><link>https://www.buanacoding.com/2025/04/concurrency-in-go-goroutines-and.html</link><pubDate>Sat, 26 Apr 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/concurrency-in-go-goroutines-and.html</guid><description>&lt;p&gt;One of the most powerful features of Go is its built-in support for concurrency. Go makes it easy to write programs that perform multiple tasks at the same time, thanks to goroutines and channels. Unlike traditional multithreading, Go provides a lightweight and clean way to build concurrent systems with minimal overhead and boilerplate.&lt;/p&gt;
&lt;p&gt;In this article, you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The difference between concurrency and parallelism&lt;/li&gt;
&lt;li&gt;What goroutines are and how to use them&lt;/li&gt;
&lt;li&gt;How channels allow communication between goroutines&lt;/li&gt;
&lt;li&gt;Buffered vs unbuffered channels&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;select&lt;/code&gt; statement&lt;/li&gt;
&lt;li&gt;Common concurrency problems and how to avoid them&lt;/li&gt;
&lt;li&gt;Real-world examples and best practices&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="concurrency-vs-parallelism"&gt;Concurrency vs Parallelism&lt;/h2&gt;
&lt;p&gt;Concurrency means doing multiple things at once (interleaved), while parallelism means running them simultaneously on different processors. Go’s concurrency model allows you to write code that is concurrent, and Go’s runtime handles whether it is executed in parallel depending on available CPU cores.&lt;/p&gt;</description></item><item><title>Writing Reusable and Type-Safe Code</title><link>https://www.buanacoding.com/2025/04/generics-in-go-writing-reusable-and-type-safe-code.html</link><pubDate>Fri, 25 Apr 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/generics-in-go-writing-reusable-and-type-safe-code.html</guid><description>&lt;p&gt;Generics were introduced in Go 1.18, marking a significant evolution of the language. They allow you to write flexible, reusable code without sacrificing type safety. With generics, you can define functions, types, and data structures that work with different types, all while maintaining strong compile-time checks.&lt;/p&gt;
&lt;p&gt;In this article, you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What generics are and why they matter&lt;/li&gt;
&lt;li&gt;How to define generic functions and types&lt;/li&gt;
&lt;li&gt;Type parameters and constraints&lt;/li&gt;
&lt;li&gt;Real-world examples of generics&lt;/li&gt;
&lt;li&gt;Best practices when using generics in Go&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-are-generics"&gt;What Are Generics?&lt;/h2&gt;
&lt;p&gt;Generics let you write code that works with different data types while keeping the benefits of static typing. Before generics, developers often used &lt;code&gt;interface{}&lt;/code&gt; and type assertions to achieve flexibility, but that meant losing compile-time type safety.&lt;/p&gt;</description></item><item><title>Measuring Performance with testing.B</title><link>https://www.buanacoding.com/2025/04/benchmarking-in-go-measuring.html</link><pubDate>Thu, 24 Apr 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/benchmarking-in-go-measuring.html</guid><description>&lt;p&gt;Benchmarking is the process of measuring the performance of code. In Go, benchmarking is built into the standard &lt;code&gt;testing&lt;/code&gt; package, making it easy to test how fast your functions run. Whether you&amp;rsquo;re comparing two algorithms, optimizing critical sections of code, or experimenting with concurrency, benchmarking helps you make informed decisions.&lt;/p&gt;
&lt;p&gt;This article will walk you through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is benchmarking and why it matters&lt;/li&gt;
&lt;li&gt;How to write benchmark functions in Go&lt;/li&gt;
&lt;li&gt;Interpreting benchmark results&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;b.ResetTimer()&lt;/code&gt;, &lt;code&gt;b.StopTimer()&lt;/code&gt;, and &lt;code&gt;b.StartTimer()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Common use cases for benchmarking&lt;/li&gt;
&lt;li&gt;Best practices for writing meaningful benchmarks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-benchmarking-is-important"&gt;Why Benchmarking is Important&lt;/h2&gt;
&lt;p&gt;Benchmarking allows you to evaluate performance based on data, not assumptions. You can compare the execution time of different code versions, measure improvements, and catch performance regressions early. This is crucial for optimizing critical parts of applications such as sorting, searching, or processing large datasets.&lt;/p&gt;</description></item><item><title>Writing Unit Tests with the Testing Package</title><link>https://www.buanacoding.com/2025/04/testing-in-go-writing-unit-tests-with.html</link><pubDate>Wed, 23 Apr 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/testing-in-go-writing-unit-tests-with.html</guid><description>&lt;p&gt;Testing is one of the most important parts of software development, yet often overlooked. In Go, testing is not an afterthought — it&amp;rsquo;s built into the language itself through the powerful and easy-to-use &lt;code&gt;testing&lt;/code&gt; package. Whether you&amp;rsquo;re building a web app, API, or CLI tool, writing tests will help you catch bugs early, document your code, and refactor safely.&lt;/p&gt;
&lt;p&gt;This article will help you understand:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why testing matters in software development&lt;/li&gt;
&lt;li&gt;The basics of writing tests in Go&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;t.Error&lt;/code&gt;, &lt;code&gt;t.Fail&lt;/code&gt;, and &lt;code&gt;t.Fatal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Table-driven tests&lt;/li&gt;
&lt;li&gt;Running and understanding test results&lt;/li&gt;
&lt;li&gt;Measuring code coverage&lt;/li&gt;
&lt;li&gt;Best practices for writing useful tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-testing-is-important"&gt;Why Testing is Important&lt;/h2&gt;
&lt;p&gt;Testing helps you ensure that your code works as expected — not just today, but as it evolves. Without tests, it&amp;rsquo;s risky to make changes because you can&amp;rsquo;t be confident you haven&amp;rsquo;t broken something.&lt;/p&gt;</description></item><item><title>Managing Errors the Right Way</title><link>https://www.buanacoding.com/2025/04/error-handling-in-go-managing-errors.html</link><pubDate>Tue, 22 Apr 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/error-handling-in-go-managing-errors.html</guid><description>&lt;p&gt;Error handling is a core part of Go programming. Unlike many languages that use exceptions, Go takes a more straightforward and explicit approach. In Go, functions often return an error as the last return value, and it&amp;rsquo;s the developer’s job to check and handle it. This method may seem verbose at first, but it leads to more robust and predictable code.&lt;/p&gt;
&lt;p&gt;In this article, you&amp;rsquo;ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What an error is in Go&lt;/li&gt;
&lt;li&gt;How to handle errors using &lt;code&gt;if err != nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Creating custom errors&lt;/li&gt;
&lt;li&gt;Error wrapping with Go 1.13+&lt;/li&gt;
&lt;li&gt;Custom error types&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;panic&lt;/code&gt; and &lt;code&gt;recover&lt;/code&gt; (when and why)&lt;/li&gt;
&lt;li&gt;Best practices for error handling&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-an-error-in-go"&gt;What is an Error in Go?&lt;/h2&gt;
&lt;p&gt;In Go, the &lt;code&gt;error&lt;/code&gt; type is a built-in interface:&lt;/p&gt;</description></item><item><title>Building Flexible and Reusable Code</title><link>https://www.buanacoding.com/2025/04/interfaces-in-go-building-flexible-and.html</link><pubDate>Mon, 21 Apr 2025 10:30:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/interfaces-in-go-building-flexible-and.html</guid><description>&lt;p&gt;Interfaces are one of the most important features in Go. They allow you to write flexible, reusable, and loosely coupled code. In Go, an interface defines a set of method signatures, and any type that implements those methods satisfies the interface — without needing to explicitly declare that it does so. This is a powerful concept that supports polymorphism and clean architecture in Go applications.&lt;/p&gt;
&lt;p&gt;In this article, you&amp;rsquo;ll learn:&lt;/p&gt;</description></item><item><title>Reference Types and Receivers Explained</title><link>https://www.buanacoding.com/2025/04/understanding-pointers-in-go-reference.html</link><pubDate>Sun, 20 Apr 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/understanding-pointers-in-go-reference.html</guid><description>&lt;p&gt;In Go, understanding pointers is essential if you want to work effectively with functions, methods, and memory-efficient code. Unlike some other languages, Go’s approach to pointers is clean and straightforward—there’s no pointer arithmetic, and most things can be done without overly complex syntax.&lt;/p&gt;
&lt;p&gt;This article will help you understand:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What pointers are in Go and how they work&lt;/li&gt;
&lt;li&gt;Using pointers in functions&lt;/li&gt;
&lt;li&gt;Method receivers: value vs pointer&lt;/li&gt;
&lt;li&gt;Choosing between value or pointer receiver&lt;/li&gt;
&lt;li&gt;Common mistakes with pointers&lt;/li&gt;
&lt;li&gt;Best practices for using pointers effectively&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-a-pointer"&gt;What is a Pointer?&lt;/h2&gt;
&lt;p&gt;A pointer is a variable that stores the memory address of another variable. You use the &lt;code&gt;&amp;amp;&lt;/code&gt; operator to get the address and &lt;code&gt;*&lt;/code&gt; to access the value at that address.&lt;/p&gt;</description></item><item><title>Defining and Using Custom Types</title><link>https://www.buanacoding.com/2025/04/structs-and-methods-in-go-defining-and.html</link><pubDate>Sat, 19 Apr 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/structs-and-methods-in-go-defining-and.html</guid><description>&lt;p&gt;In Go, a struct is a powerful way to group related data together. It allows you to define your own custom types by combining variables (also called fields). Structs are often used to model real-world entities like users, products, or messages. When combined with methods, structs become the foundation for writing clean and reusable code in Go.&lt;/p&gt;
&lt;p&gt;In this article, you&amp;rsquo;ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to define and use structs in Go&lt;/li&gt;
&lt;li&gt;How to attach methods to a struct&lt;/li&gt;
&lt;li&gt;The difference between value and pointer receivers&lt;/li&gt;
&lt;li&gt;Best practices for using structs and methods effectively&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="defining-a-struct"&gt;Defining a Struct&lt;/h2&gt;
&lt;p&gt;To define a struct, you use the &lt;code&gt;type&lt;/code&gt; keyword followed by the name of the struct and the &lt;code&gt;struct&lt;/code&gt; keyword:&lt;/p&gt;</description></item><item><title>A Beginner's Guide</title><link>https://www.buanacoding.com/2025/04/understanding-functions-in-go-beginners.html</link><pubDate>Fri, 18 Apr 2025 11:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/understanding-functions-in-go-beginners.html</guid><description>&lt;p&gt;Functions are an essential part of programming in any language, and Go is no exception. A function lets you organize code into reusable blocks, which helps reduce duplication and improve readability. In this article, you’ll learn how functions work in Go, how to define them, use them, and apply best practices.&lt;/p&gt;
&lt;p&gt;This guide covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to define and call a function in Go&lt;/li&gt;
&lt;li&gt;Function parameters and return values&lt;/li&gt;
&lt;li&gt;Multiple return values&lt;/li&gt;
&lt;li&gt;Named return values&lt;/li&gt;
&lt;li&gt;Variadic functions&lt;/li&gt;
&lt;li&gt;Functions as values and arguments&lt;/li&gt;
&lt;li&gt;Best practices for clean function design&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="defining-and-calling-a-function"&gt;Defining and Calling a Function&lt;/h2&gt;
&lt;p&gt;To define a function in Go, use the &lt;code&gt;func&lt;/code&gt; keyword, followed by the function name, parameters, and return type (if any). Here&amp;rsquo;s a simple example:&lt;/p&gt;</description></item><item><title>Arrays, Slices, and Maps Explained</title><link>https://www.buanacoding.com/2025/04/working-with-collections-in-go-arrays.html</link><pubDate>Thu, 17 Apr 2025 22:46:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/working-with-collections-in-go-arrays.html</guid><description>&lt;p&gt;When building applications in Go, it&amp;rsquo;s common to work with groups of data. For example, you might want to store a list of user names, or map names to scores. In Go, you can use collections like arrays, slices, and maps to do that.&lt;/p&gt;
&lt;p&gt;In this article, we’ll explore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What arrays are and how they work&lt;/li&gt;
&lt;li&gt;How slices offer more flexibility&lt;/li&gt;
&lt;li&gt;What maps are and how to use them&lt;/li&gt;
&lt;li&gt;Common operations with collections&lt;/li&gt;
&lt;li&gt;Practical examples to understand the difference between them&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s dive in and learn how Go helps us manage grouped data efficiently.&lt;/p&gt;</description></item><item><title>for, range, break, and continue Explained</title><link>https://www.buanacoding.com/2025/04/understanding-loops-in-go-for-range.html</link><pubDate>Wed, 16 Apr 2025 22:06:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/understanding-loops-in-go-for-range.html</guid><description>&lt;p&gt;Loops are a key part of programming. They let us run the same piece of code multiple times without repeating ourselves. In Go, loops are simple but powerful — and they&amp;rsquo;re built using just one keyword: for.&lt;/p&gt;
&lt;p&gt;In this article, we’ll explore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The basic for loop in Go&lt;/li&gt;
&lt;li&gt;Using for as a while loop&lt;/li&gt;
&lt;li&gt;Looping with range&lt;/li&gt;
&lt;li&gt;Breaking or skipping parts of loops with break and continue&lt;/li&gt;
&lt;li&gt;Real-world examples to help you understand how loops work&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-a-loop"&gt;What is a Loop?&lt;/h2&gt;
&lt;p&gt;A loop is a way to repeat a block of code as long as a condition remains true. Instead of writing similar code many times, we can put it in a loop and let the program handle the repetition. This makes our code shorter, cleaner, and easier to manage. Go uses the keyword for for all loop types, which makes it both simple and flexible.&lt;/p&gt;</description></item><item><title>Understanding Conditional Statements in Go (if, switch, etc.)</title><link>https://www.buanacoding.com/2025/04/understanding-conditional-statements-in.html</link><pubDate>Tue, 15 Apr 2025 19:09:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/04/understanding-conditional-statements-in.html</guid><description>&lt;p&gt;Conditional statements are one of the essential building blocks in any programming language, including Go. They allow us to make decisions in our code — telling the program to do something only if a certain condition is true.&lt;/p&gt;
&lt;p&gt;In this article, we will explore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The if, else, and else if statements&lt;/li&gt;
&lt;li&gt;The switch statement&lt;/li&gt;
&lt;li&gt;Best practices for using conditionals in Go&lt;/li&gt;
&lt;li&gt;Real examples to help you practice&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-a-conditional-statement"&gt;What is a Conditional Statement?&lt;/h2&gt;
&lt;p&gt;A conditional statement evaluates whether a condition is true or false. Based on that, your Go program can choose which block of code to execute.&lt;/p&gt;</description></item><item><title>Basics and Practical Examples</title><link>https://www.buanacoding.com/2024/07/understanding-string-data-type-in-go.html</link><pubDate>Mon, 22 Jul 2024 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2024/07/understanding-string-data-type-in-go.html</guid><description>&lt;p&gt;In our series on understanding data types in the Go programming language, after discussing numeric and boolean types, we will now explore strings. Strings are one of the most frequently used data types in programming due to their ubiquitous use in handling text. In Go, strings have several unique characteristics that we will explore in this article.&lt;/p&gt;
&lt;h2 id="introduction-to-strings"&gt;Introduction to Strings&lt;/h2&gt;
&lt;p&gt;In Go, a string is a sequence of immutable bytes. This means that once a string value is set, it cannot be changed without creating a new string.&lt;/p&gt;</description></item><item><title>Basics and Practical Examples</title><link>https://www.buanacoding.com/2024/07/understanding-numeric-data-type-in-go.html</link><pubDate>Sat, 20 Jul 2024 19:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2024/07/understanding-numeric-data-type-in-go.html</guid><description>&lt;p&gt;Go, also known as Golang, is a statically typed language developed by Google. It&amp;rsquo;s known for its simplicity and efficiency, especially when it comes to systems and concurrent programming. In this article, we&amp;rsquo;ll explore the numeric types in Go and provide practical examples to illustrate their usage.&lt;/p&gt;
&lt;h2 id="basic-numeric-types"&gt;Basic Numeric Types&lt;/h2&gt;
&lt;p&gt;Go offers several basic numeric types categorized into integers, floating point numbers, and complex numbers. Here’s a quick overview:&lt;/p&gt;
&lt;h3 id="integer"&gt;Integer&lt;/h3&gt;
&lt;p&gt;Integer types are divided into two categories, signed and unsigned. The signed integers &lt;strong&gt;int8, int16, int32, int64&lt;/strong&gt; can hold both negative and positive values, whereas unsigned integers &lt;strong&gt;int8, int16, int32, int64&lt;/strong&gt; can only hold positive values and zero.&lt;/p&gt;</description></item><item><title>Basics and Practical Examples</title><link>https://www.buanacoding.com/2024/07/understanding-booleans-in-go-basics.html</link><pubDate>Thu, 18 Jul 2024 19:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2024/07/understanding-booleans-in-go-basics.html</guid><description>&lt;p&gt;In the Go programming language, as in many other programming languages, the boolean data type is fundamental. It represents truth values, either true or false. Booleans are crucial in software development for decision-making, allowing developers to control the flow of execution through conditional statements like if, else, and looping constructs such as for.&lt;/p&gt;
&lt;p&gt;Declaration and Initialization&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;To declare a boolean in Go, you use the keyword &lt;strong&gt;bool&lt;/strong&gt;. Here&amp;rsquo;s how you can declare and initialize a boolean variable:&lt;/p&gt;</description></item><item><title>5 Laravel extensions that you must install on your Visual Studio Code</title><link>https://www.buanacoding.com/2024/04/5-laravel-extensions-that-you-must-install-on-your-visual-studio-code.html</link><pubDate>Sun, 21 Apr 2024 21:23:00 +0700</pubDate><guid>https://www.buanacoding.com/2024/04/5-laravel-extensions-that-you-must-install-on-your-visual-studio-code.html</guid><description>&lt;p&gt;If you&amp;rsquo;re just getting started with Laravel or even if you&amp;rsquo;ve been working with it for a while, using the right tools can make a big difference. Visual Studio Code (VS Code) is one of the most popular code editors among web developers, and thankfully, it has a great ecosystem of extensions that can help boost your productivity when working with Laravel.&lt;/p&gt;
&lt;p&gt;In this article, we&amp;rsquo;ll go through five essential VS Code extensions that you should install if you&amp;rsquo;re working with Laravel. These tools will help you write code faster, reduce bugs, and improve your workflow overall.&lt;/p&gt;</description></item><item><title>Belajar Membuat Aplikasi Pertama Anda dengan Laravel</title><link>https://www.buanacoding.com/2024/04/belajar-membuat-aplikasi-pertama-anda-dengan-laravel.html</link><pubDate>Fri, 19 Apr 2024 15:58:00 +0700</pubDate><guid>https://www.buanacoding.com/2024/04/belajar-membuat-aplikasi-pertama-anda-dengan-laravel.html</guid><description>&lt;p&gt;Ketika kita pertama kali melangkah ke dalam dunia pengembangan web, rasanya seperti memasuki sebuah labirin yang penuh dengan kode dan logika yang rumit. Namun, ada sesuatu yang menarik tentang proses belajar bagaimana segala sesuatu terhubung dan bekerja bersama untuk membentuk sebuah aplikasi web.&lt;/p&gt;
&lt;p&gt;Apakah Anda sedang mencari hobi baru atau ingin mengejar karier sebagai pengembang web, membangun aplikasi pertama Anda adalah pengalaman yang sangat berharga. Dengan memahami dasar-dasar pengembangan web, Anda akan memiliki dasar yang kuat untuk mempelajari teknologi-teknologi baru dan membangun aplikasi yang lebih kompleks di masa depan.&lt;/p&gt;</description></item><item><title>Easiest Way to Install Golang on Linux Snap or Manual Source?</title><link>https://www.buanacoding.com/2024/04/easiest-way-to-install-golang-on-linux.html</link><pubDate>Mon, 08 Apr 2024 06:23:00 +0700</pubDate><guid>https://www.buanacoding.com/2024/04/easiest-way-to-install-golang-on-linux.html</guid><description>&lt;p&gt;Learning Golang recently opened up new perspectives for me in software development. One of the best ways to solidify your understanding is by teaching others. That’s why in this article, I’m sharing my experience installing Go on Linux—using both Snap and manual source installation.&lt;/p&gt;
&lt;p&gt;Writing this guide not only helps others get started, but also helps reinforce the steps in my own memory.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="installing-golang-using-snap"&gt;Installing Golang Using Snap&lt;/h2&gt;
&lt;p&gt;Snap is a universal package manager developed by Canonical (Ubuntu’s creator). It simplifies app installation by bundling dependencies, ensuring compatibility across most Linux distributions.&lt;/p&gt;</description></item><item><title>How to fix broken update error in linux (Terminal)</title><link>https://www.buanacoding.com/2023/11/how-to-fix-broken-update-error-in-linux.html</link><pubDate>Sat, 11 Nov 2023 12:47:00 +0700</pubDate><guid>https://www.buanacoding.com/2023/11/how-to-fix-broken-update-error-in-linux.html</guid><description>&lt;p&gt;Linux is a robust operating system, but occasionally you might encounter a &amp;lsquo;broken update error&amp;rsquo; when trying to update your system through the terminal. This issue can halt your system updates and potentially affect system stability. Here’s a comprehensive guide on how to resolve this error, ensuring your Linux system remains up-to-date and secure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understanding the Error&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A broken update error in Linux typically occurs when package dependencies are unsatisfied, when there are conflicts between packages, or when the package repositories are not correctly configured. This can lead to a partial or failed update, rendering your system&amp;rsquo;s package manager unable to proceed with updates.&lt;/p&gt;</description></item><item><title>how to install and configure yajra datatable in Laravel</title><link>https://www.buanacoding.com/2023/08/how-to-install-and-configure-yajra.html</link><pubDate>Sun, 06 Aug 2023 00:13:00 +0700</pubDate><guid>https://www.buanacoding.com/2023/08/how-to-install-and-configure-yajra.html</guid><description>&lt;p&gt;In the realm of modern web development, providing a seamless user experience and enhancing the overall performance of your web applications is paramount. One essential aspect that plays a pivotal role in achieving these goals is efficient data presentation and manipulation. This is where Yajra DataTables comes into the picture.&lt;/p&gt;
&lt;p&gt;Yajra DataTables is a powerful and versatile jQuery-based plugin for Laravel, designed to simplify the process of displaying data in tabular form with advanced features such as filtering, sorting, pagination, and more. It empowers developers to create interactive and dynamic data tables effortlessly, significantly improving how data is showcased to end users.&lt;/p&gt;</description></item><item><title>Cara Menjalankan Project Laravel Clone dari GitHub</title><link>https://www.buanacoding.com/2023/04/cara-menjalankan-project-laravel-clone.html</link><pubDate>Sun, 09 Apr 2023 23:08:00 +0700</pubDate><guid>https://www.buanacoding.com/2023/04/cara-menjalankan-project-laravel-clone.html</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Dapat project Laravel dari GitHub tapi bingung cara jalankannya? Atau malah error melulu saat setup? Tenang, kamu tidak sendirian. Banyak developer pemula (bahkan yang udah agak senior) sering stuck di tahap ini.&lt;/p&gt;
&lt;p&gt;Clone project Laravel dari GitHub itu gampang kalau tau step-by-step yang benar. Tapi kalau asal comot dan langsung jalankan, siap-siap ketemu segudang error dari missing dependencies, database connection failed, sampai permission issues.&lt;/p&gt;</description></item><item><title>About</title><link>https://www.buanacoding.com/about/</link><pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.buanacoding.com/about/</guid><description>&lt;h1 id="hi-im-wiku-karno-"&gt;Hi, I&amp;rsquo;m Wiku Karno! 👋&lt;/h1&gt;
&lt;p&gt;Welcome to &lt;strong&gt;BuanaCoding&lt;/strong&gt; – where I share my journey as a software developer and help others build better applications through practical tutorials and real-world insights.&lt;/p&gt;
&lt;h2 id="what-i-do"&gt;What I Do&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m a passionate software developer who loves diving deep into modern programming languages and frameworks. My expertise spans across several key areas:&lt;/p&gt;
&lt;h3 id="go-programming"&gt;&lt;strong&gt;Go Programming&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Go is my primary language of choice. I&amp;rsquo;ve written extensively about Go fundamentals, advanced concepts like goroutines and channels, building REST APIs, working with databases, and following Go best practices. Whether you&amp;rsquo;re just starting with Go or looking to level up your skills, you&amp;rsquo;ll find comprehensive guides here.&lt;/p&gt;</description></item><item><title>Contact</title><link>https://www.buanacoding.com/contact/</link><pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.buanacoding.com/contact/</guid><description>&lt;p&gt;If you would like to get in touch or collaborate with me — including freelance work — feel free to reach out via the contact information below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; &lt;a href="mailto:buanacoding@gmail.com"&gt;
 buanacoding@gmail.com
&lt;/a&gt;
&lt;/p&gt;</description></item><item><title>Disclaimer</title><link>https://www.buanacoding.com/disclaimer/</link><pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.buanacoding.com/disclaimer/</guid><description>&lt;p&gt;If you require any more information or have any questions about our site&amp;rsquo;s disclaimer, please feel free to contact us by email at &lt;a href="mailto:buanacoding@gmail.com"&gt;
 buanacoding@gmail.com
&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;All the information on this website - &lt;a href="https://www.buanacoding.com" target="_blank" rel="nofollow noopener noreferrer"&gt;
 https://www.buanacoding.com
&lt;/a&gt;
 - is published in good faith and for general information purpose only. buanacoding does not make any warranties about the completeness, reliability and accuracy of this information. Any action you take upon the information you find on this website (buanacoding), is strictly at your own risk. buanacoding will not be liable for any losses and/or damages in connection with the use of our website. Our disclaimer was generated with the help of the Disclaimer Generator.&lt;/p&gt;</description></item><item><title>Privacy Policy</title><link>https://www.buanacoding.com/privacy-policy/</link><pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.buanacoding.com/privacy-policy/</guid><description>&lt;p&gt;At &lt;strong&gt;BuanaCoding&lt;/strong&gt;, accessible from &lt;a href="https://www.buanacoding.com" target="_blank" rel="nofollow noopener noreferrer"&gt;
 https://www.buanacoding.com
&lt;/a&gt;
, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains the types of information that are collected and recorded by BuanaCoding and how we use it.&lt;/p&gt;
&lt;p&gt;If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.&lt;/p&gt;
&lt;h2 id="log-files"&gt;Log Files&lt;/h2&gt;
&lt;p&gt;BuanaCoding follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this as part of hosting services&amp;rsquo; analytics. The information collected by log files includes Internet Protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamps, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is to analyze trends, administer the site, track users’ movement around the website, and gather demographic information.&lt;/p&gt;</description></item></channel></rss>