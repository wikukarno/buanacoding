<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQLite on Buana Coding</title>
    <link>http://localhost:1313/tags/sqlite/</link>
    <description>Recent content in SQLite on Buana Coding</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Oct 2025 10:00:00 +0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/sqlite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Perform Database Migrations in Go using golang-migrate</title>
      <link>http://localhost:1313/2025/10/how-to-perform-database-migrations-in-go-using-golang-migrate.html</link>
      <pubDate>Sun, 05 Oct 2025 10:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/10/how-to-perform-database-migrations-in-go-using-golang-migrate.html</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;Managing database schema changes is one of those tasks that seems simple until you&amp;rsquo;re dealing with multiple environments, team members making conflicting changes, or trying to rollback a production deployment at 2 AM. If you&amp;rsquo;ve ever manually run SQL scripts on production hoping you didn&amp;rsquo;t miss anything, you know exactly what I&amp;rsquo;m talking about.&lt;/p&gt;&#xA;&lt;p&gt;golang-migrate solves this problem by giving you version control for your database schema. Just like git tracks code changes, migrations track schema changes. You can move forward, rollback, and know exactly what state your database is in at any time.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
