<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Performance on Buana Coding</title><link>https://www.buanacoding.com/tags/performance/</link><description>Recent content in Performance on Buana Coding</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 05 Oct 2025 10:00:00 +0700</lastBuildDate><atom:link href="https://www.buanacoding.com/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Profile and Optimize Go Applications with pprof</title><link>https://www.buanacoding.com/2025/10/how-to-profile-and-optimize-go-applications-with-pprof.html</link><pubDate>Sun, 05 Oct 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-profile-and-optimize-go-applications-with-pprof.html</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Your Go application is slow. Requests take too long, memory usage keeps climbing, or CPU maxes out under load. You need answers, not guesses. That&amp;rsquo;s where pprof comes in.&lt;/p&gt;
&lt;p&gt;pprof is Go&amp;rsquo;s built-in profiler that shows you exactly what&amp;rsquo;s happening inside your running application. It tells you which functions eat CPU cycles, which code paths allocate tons of memory, where goroutines get stuck, and what&amp;rsquo;s blocking your program. With this data, you stop guessing and start fixing real bottlenecks.&lt;/p&gt;</description></item><item><title>How to Use Redis with Go - Caching and Session Management Tutorial</title><link>https://www.buanacoding.com/2025/10/how-to-use-redis-with-go-caching-session-management.html</link><pubDate>Thu, 02 Oct 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-use-redis-with-go-caching-session-management.html</guid><description>&lt;p&gt;Modern applications demand speed and scalability that traditional databases struggle to provide alone. Users expect instant responses, APIs must handle thousands of concurrent requests, and systems need to scale horizontally without performance degradation. Redis addresses these challenges by providing blazing-fast in-memory data storage that complements your existing database infrastructure.&lt;/p&gt;
&lt;p&gt;This comprehensive guide demonstrates how to integrate Redis with Go applications for caching and session management. You&amp;rsquo;ll learn to set up the go-redis client, implement various caching patterns, manage user sessions across distributed servers, optimize connection pooling, handle cache invalidation, and follow production best practices that ensure reliability and performance at scale.&lt;/p&gt;</description></item><item><title>API Gateway with Golang - Load Balancing and Rate Limiting Implementation</title><link>https://www.buanacoding.com/2025/09/api-gateway-golang-load-balancing-rate-limiting.html</link><pubDate>Mon, 29 Sep 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/api-gateway-golang-load-balancing-rate-limiting.html</guid><description>&lt;p&gt;When you&amp;rsquo;re building distributed systems, one component stands between chaos and order: the API Gateway. Think of it as the bouncer at an exclusive club - it decides who gets in, where they go, and how fast they can enter. After working with various microservice architectures, I can tell you that a well-implemented API Gateway is often the difference between a system that scales gracefully and one that crumbles under pressure.&lt;/p&gt;</description></item><item><title>Easy Background Processing Tutorial</title><link>https://www.buanacoding.com/2025/09/laravel-queue-jobs-background-processing-tutorial.html</link><pubDate>Wed, 24 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-queue-jobs-background-processing-tutorial.html</guid><description>&lt;p&gt;Ever had a user complain that your app takes forever to send an email or process an image upload? Or maybe you&amp;rsquo;ve watched your response times crawl to a halt because you&amp;rsquo;re trying to do too much work during a single request? Laravel queues are the solution you&amp;rsquo;ve been looking for, and they&amp;rsquo;re easier to set up than you might think.&lt;/p&gt;
&lt;p&gt;Think of Laravel queues as your app&amp;rsquo;s personal assistant. Instead of making users wait while you send emails, resize images, or generate reports, you hand these tasks off to the background and let users continue with their day. The work still gets done, but it doesn&amp;rsquo;t block the user experience.&lt;/p&gt;</description></item><item><title>Boost Performance with High-Speed Application Server</title><link>https://www.buanacoding.com/2025/09/laravel-octane-boost-performance-tutorial.html</link><pubDate>Mon, 22 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-octane-boost-performance-tutorial.html</guid><description>&lt;p&gt;If you&amp;rsquo;re tired of waiting for your Laravel app to respond and want to see some serious speed improvements, Laravel Octane might be exactly what you&amp;rsquo;re looking for. Think of it as giving your application a turbo boost - we&amp;rsquo;re talking about performance gains that can make your app 3x to 10x faster in many scenarios.&lt;/p&gt;
&lt;p&gt;Laravel Octane takes your regular Laravel application and runs it on high-performance application servers like Swoole or RoadRunner. Instead of booting up your entire application for every single request (which is what traditional PHP does), Octane keeps your app loaded in memory and reuses it for multiple requests. The result? Lightning-fast response times that will make your users happy.&lt;/p&gt;</description></item><item><title>Laravel N+1 Query Problem Solution Essential Database Optimization Guide</title><link>https://www.buanacoding.com/2025/09/laravel-n-plus-one-query-problem-solution.html</link><pubDate>Mon, 22 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-n-plus-one-query-problem-solution.html</guid><description>&lt;p&gt;If you&amp;rsquo;ve ever wondered why your Laravel app suddenly becomes sluggish when displaying lists of data, you might be dealing with the dreaded N+1 query problem. It&amp;rsquo;s one of those sneaky performance killers that can turn a fast application into a slow, resource-hungry monster. Don&amp;rsquo;t worry though - once you understand what&amp;rsquo;s happening and how to fix it, you&amp;rsquo;ll never fall into this trap again.&lt;/p&gt;
&lt;h2 id="what-is-the-n1-query-problem"&gt;What is the N+1 Query Problem?&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s what happens: your app makes one query to get a list of records, then fires off a separate query for each record to grab related data. Picture this - you want to show 100 blog posts with their authors&amp;rsquo; names. Instead of being smart about it, your app runs one query to get the posts, then 100 more queries to fetch each author. That&amp;rsquo;s 101 database hits when you could&amp;rsquo;ve done it with just 2!&lt;/p&gt;</description></item><item><title>Breaking Monolith into Scalable Services</title><link>https://www.buanacoding.com/2025/09/laravel-microservices-breaking-monolith.html</link><pubDate>Sat, 20 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-microservices-breaking-monolith.html</guid><description>&lt;p&gt;As your Laravel application grows, you might find yourself hitting the limitations of a monolithic architecture. Database bottlenecks, deployment challenges, and team coordination issues become increasingly common. The solution? Transitioning to a microservices architecture that breaks your monolith into smaller, manageable, and independently deployable services.&lt;/p&gt;
&lt;p&gt;This comprehensive guide will walk you through the entire process of decomposing your Laravel monolith into microservices, from initial planning to practical implementation strategies.&lt;/p&gt;
&lt;h2 id="understanding-monolith-vs-microservices"&gt;Understanding Monolith vs Microservices&lt;/h2&gt;
&lt;p&gt;A monolithic application packages all functionality into a single deployable unit. While this approach works well for small to medium applications, it presents several challenges as your application scales:&lt;/p&gt;</description></item><item><title>15 Essential Techniques for Fast Applications</title><link>https://www.buanacoding.com/2025/09/laravel-performance-optimization-15-techniques.html</link><pubDate>Mon, 08 Sep 2025 12:30:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-performance-optimization-15-techniques.html</guid><description>&lt;p&gt;Performance optimization is crucial for creating successful Laravel applications that provide excellent user experiences. Slow applications frustrate users, hurt SEO rankings, and can significantly impact business revenue. This comprehensive guide covers 15 proven techniques to dramatically improve your Laravel application&amp;rsquo;s performance.&lt;/p&gt;
&lt;p&gt;Modern web users expect applications to load quickly and respond instantly to interactions. Studies show that even a one-second delay in page load time can reduce conversions by 7%. Laravel provides powerful tools and features to help you build fast applications, but knowing how to use them effectively makes all the difference.&lt;/p&gt;</description></item></channel></rss>