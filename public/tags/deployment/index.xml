<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deployment on Buana Coding</title><link>https://www.buanacoding.com/tags/deployment/</link><description>Recent content in Deployment on Buana Coding</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 17 Oct 2025 11:00:00 +0700</lastBuildDate><atom:link href="https://www.buanacoding.com/tags/deployment/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Implement CI/CD for Go Applications with GitHub Actions</title><link>https://www.buanacoding.com/2025/10/how-to-implement-cicd-for-go-applications-with-github-actions.html</link><pubDate>Fri, 17 Oct 2025 11:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-implement-cicd-for-go-applications-with-github-actions.html</guid><description>&lt;p&gt;Manual deployments are error-prone and time-consuming. You make a change, run tests locally, build the binary, SSH into servers, copy files, restart services, and hope nothing breaks. Multiply this by ten deployments per day and you&amp;rsquo;ve wasted hours on repetitive tasks that should be automated.&lt;/p&gt;
&lt;p&gt;This guide demonstrates how to implement CI/CD (Continuous Integration/Continuous Deployment) for Go applications using GitHub Actions. You&amp;rsquo;ll learn to create automated workflows that test code on every push, build optimized binaries for multiple platforms, deploy Docker containers automatically, cache dependencies for faster builds, and apply production-ready practices that catch bugs before users do.&lt;/p&gt;</description></item><item><title>How to Containerize and Deploy Go Apps with Docker</title><link>https://www.buanacoding.com/2025/10/how-to-containerize-and-deploy-go-apps-with-docker.html</link><pubDate>Tue, 07 Oct 2025 06:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-containerize-and-deploy-go-apps-with-docker.html</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Deploying Go applications used to mean SSH into servers, copying binaries, managing dependencies, and praying everything works. Different machines had different library versions. Production behaved differently than development. Debugging deployment issues wasted hours.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is Docker for Go?&lt;/strong&gt; Docker is a containerization platform that packages your Go application and all its dependencies into a portable container image. Instead of installing Go and dependencies on every server, Docker bundles everything your app needs into a container that runs identically everywhere - from your laptop to production servers.&lt;/p&gt;</description></item><item><title>Fix Laravel Permission Issues Solving 403 and 500 Errors on Production Server</title><link>https://www.buanacoding.com/2025/09/fix-laravel-permission-issues-production.html</link><pubDate>Thu, 11 Sep 2025 08:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/fix-laravel-permission-issues-production.html</guid><description>&lt;p&gt;If a fresh deploy returns 403 or 500, the cause is usually predictable: wrong ownership/permissions, web server misconfig, missing PHP extensions, or SELinux. Use the checklist below to find and fix it quickly. Examples cover Ubuntu/Debian (Nginx/Apache with PHP‑FPM) and CentOS/RHEL (SELinux).&lt;/p&gt;
&lt;h2 id="why-403-vs-500"&gt;Why 403 vs 500&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;403 Forbidden from the web server: The server blocked access before Laravel ran. Common causes: wrong document root (not pointing to &lt;code&gt;public/&lt;/code&gt;), missing &lt;code&gt;try_files&lt;/code&gt;, directory or file not readable, SELinux contexts, or a security module (WAF/mod_security/Cloudflare) rejecting the request.&lt;/li&gt;
&lt;li&gt;403 from Laravel: Authorization middleware/policies, CSRF token failures, or custom gates deny the action.&lt;/li&gt;
&lt;li&gt;500 Internal Server Error: PHP crashed or threw an exception. Common causes: wrong permissions on &lt;code&gt;storage/&lt;/code&gt; or &lt;code&gt;bootstrap/cache&lt;/code&gt;, missing PHP extensions, invalid &lt;code&gt;.env&lt;/code&gt;, wrong &lt;code&gt;APP_KEY&lt;/code&gt;, or syntax/runtime errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="quick-fix-checklist-safe-defaults"&gt;Quick fix checklist (safe defaults)&lt;/h2&gt;
&lt;p&gt;Run these commands from your project root (adjust the PHP‑FPM user for your distro):&lt;/p&gt;</description></item></channel></rss>