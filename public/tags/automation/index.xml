<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Automation on Buana Coding</title><link>https://www.buanacoding.com/tags/automation/</link><description>Recent content in Automation on Buana Coding</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 27 Oct 2025 10:00:00 +0700</lastBuildDate><atom:link href="https://www.buanacoding.com/tags/automation/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Build a Web Scraper in Python with BeautifulSoup and Requests</title><link>https://www.buanacoding.com/2025/10/how-to-build-web-scraper-python-beautifulsoup-requests.html</link><pubDate>Mon, 27 Oct 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-build-web-scraper-python-beautifulsoup-requests.html</guid><description>&lt;p&gt;I spent three weeks last month manually copying product prices from competitor websites into spreadsheets for a client&amp;rsquo;s market analysis. Three. Weeks. Every day, opening dozens of browser tabs, copying prices, checking specifications, pasting into Excel. My eyes hurt, my wrists hurt, and I kept making mistakes because humans aren&amp;rsquo;t meant to do repetitive tasks for hours.&lt;/p&gt;
&lt;p&gt;Then I learned web scraping. That same job that took three weeks? Now runs automatically in twenty minutes while I grab coffee. The data is cleaner, more accurate, and I can run it daily instead of monthly. Web scraping literally gave me my life back.&lt;/p&gt;</description></item><item><title>How to Automate Tasks with Cron Jobs and Shell Scripts on Linux</title><link>https://www.buanacoding.com/2025/10/how-to-automate-tasks-cron-jobs-shell-scripts-linux.html</link><pubDate>Sun, 26 Oct 2025 14:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-automate-tasks-cron-jobs-shell-scripts-linux.html</guid><description>&lt;p&gt;Automation separates beginners from experienced system administrators. Instead of manually running backups, monitoring logs, or cleaning temporary files, you write scripts once and let cron run them automatically.&lt;/p&gt;
&lt;p&gt;Cron handles time-based scheduling. Shell scripts do the actual work. Combined, they automate everything from database backups to system monitoring, log rotation, security scans, and report generation.&lt;/p&gt;
&lt;p&gt;This guide covers cron syntax, writing production-ready shell scripts, automated backups, monitoring, error handling, and notifications for reliable automation.&lt;/p&gt;</description></item><item><title>How to Implement CI/CD for Go Applications with GitHub Actions</title><link>https://www.buanacoding.com/2025/10/how-to-implement-cicd-for-go-applications-with-github-actions.html</link><pubDate>Fri, 17 Oct 2025 11:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-implement-cicd-for-go-applications-with-github-actions.html</guid><description>&lt;p&gt;Manual deployments are error-prone and time-consuming. You make a change, run tests locally, build the binary, SSH into servers, copy files, restart services, and hope nothing breaks. Multiply this by ten deployments per day and you&amp;rsquo;ve wasted hours on repetitive tasks that should be automated.&lt;/p&gt;
&lt;p&gt;This guide demonstrates how to implement CI/CD (Continuous Integration/Continuous Deployment) for Go applications using GitHub Actions. You&amp;rsquo;ll learn to create automated workflows that test code on every push, build optimized binaries for multiple platforms, deploy Docker containers automatically, cache dependencies for faster builds, and apply production-ready practices that catch bugs before users do.&lt;/p&gt;</description></item></channel></rss>