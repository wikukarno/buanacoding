<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTTP on Buana Coding</title>
    <link>http://localhost:1313/tags/http/</link>
    <description>Recent content in HTTP on Buana Coding</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 17 Oct 2025 12:00:00 +0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Handle File Uploads in Go - Validation, Storage, and Security</title>
      <link>http://localhost:1313/2025/10/how-to-handle-file-uploads-in-go-validation-storage-and-security.html</link>
      <pubDate>Fri, 17 Oct 2025 12:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/10/how-to-handle-file-uploads-in-go-validation-storage-and-security.html</guid>
      <description>&lt;p&gt;File uploads seem simple until you deploy to production. Users upload 500MB videos that crash your server. Someone uploads a PHP file disguised as an image and compromises your system. Filenames with path traversal characters like &lt;code&gt;../../etc/passwd&lt;/code&gt; expose sensitive data. What started as a basic feature becomes a security nightmare.&lt;/p&gt;&#xA;&lt;p&gt;This guide demonstrates how to handle file uploads securely in Go applications. You&amp;rsquo;ll learn to parse multipart form data correctly, validate file types using magic number detection, enforce size limits that protect server resources, sanitize filenames to prevent attacks, store files securely with proper permissions, and implement production-ready patterns that scale.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
