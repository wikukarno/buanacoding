<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OAuth2 on Buana Coding</title>
    <link>http://localhost:63300/tags/oauth2/</link>
    <description>Recent content in OAuth2 on Buana Coding</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Aug 2025 07:00:00 +0700</lastBuildDate>
    <atom:link href="http://localhost:63300/tags/oauth2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FastAPI JWT Auth with OAuth2 Password Flow (Pydantic v2 &#43; SQLAlchemy 2.0)</title>
      <link>http://localhost:63300/2025/08/fastapi-jwt-auth-oauth2-password-flow-pydantic-v2-sqlalchemy-2.html</link>
      <pubDate>Wed, 20 Aug 2025 07:00:00 +0700</pubDate>
      <guid>http://localhost:63300/2025/08/fastapi-jwt-auth-oauth2-password-flow-pydantic-v2-sqlalchemy-2.html</guid>
      <description>&lt;p&gt;Looking to add login to your FastAPI app without pulling in a full auth service? Here’s a small, production‑friendly setup. We’ll build username/password authentication with the OAuth2 Password flow and JSON Web Tokens (JWTs) for stateless access. It uses Pydantic v2 for validation and SQLAlchemy 2.0 for persistence. You’ll hash passwords properly, create/verify tokens, protect routes, and test everything end‑to‑end.&lt;/p&gt;&#xA;&lt;p&gt;If you’re deploying the finished app on Ubuntu with HTTPS, check the deployment guide: &lt;a href=&#34;http://localhost:63300/2025/08/deploy-fastapi-ubuntu-24-04-gunicorn-nginx-certbot.html&#34;&gt;&#xA;  Deploy FastAPI on Ubuntu 24.04: Gunicorn + Nginx + Certbot&#xA;&lt;/a&gt;&#xA;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
