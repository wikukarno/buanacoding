<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Laravel on Buana Coding</title><link>https://www.buanacoding.com/tags/laravel/</link><description>Recent content in Laravel on Buana Coding</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 22 Oct 2025 12:00:00 +0700</lastBuildDate><atom:link href="https://www.buanacoding.com/tags/laravel/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Create RESTful API Pagination and Filtering in Laravel</title><link>https://www.buanacoding.com/2025/10/how-to-create-restful-api-pagination-filtering-sorting-laravel.html</link><pubDate>Wed, 22 Oct 2025 12:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-create-restful-api-pagination-filtering-sorting-laravel.html</guid><description>&lt;p&gt;A good API lets clients filter, sort, and paginate through data. Nobody wants to download 10,000 records just to find a few items. This guide shows you how to add pagination, filtering, sorting, and search to your Laravel REST API.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll learn Laravel&amp;rsquo;s built-in pagination methods, how to add query parameters for filters and sorting, search across multiple columns, cursor pagination for large datasets, and API resources for formatting responses. We&amp;rsquo;ll also cover performance tips and common mistakes.&lt;/p&gt;</description></item><item><title>How to Build Real-Time Notifications with Laravel Broadcasting and Pusher</title><link>https://www.buanacoding.com/2025/10/how-to-build-real-time-notifications-laravel-broadcasting-pusher.html</link><pubDate>Wed, 22 Oct 2025 11:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-build-real-time-notifications-laravel-broadcasting-pusher.html</guid><description>&lt;p&gt;Real-time notifications let you push updates to users instantly without page refreshes. Laravel Broadcasting with Pusher makes this easy using WebSockets. When something happens on your server like a new message, order update, or system alert, your frontend gets notified immediately.&lt;/p&gt;
&lt;p&gt;This guide shows you how to set up Laravel Broadcasting from scratch. We&amp;rsquo;ll install Pusher, create events, configure channels for public and private notifications, set up Laravel Echo on the frontend, and test everything. You&amp;rsquo;ll also learn about presence channels for tracking online users and production deployment tips.&lt;/p&gt;</description></item><item><title>How to Implement Multi-Factor Authentication (2FA) in Laravel with Laravel Fortify</title><link>https://www.buanacoding.com/2025/10/laravel-two-factor-authentication-2fa-fortify.html</link><pubDate>Wed, 22 Oct 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/laravel-two-factor-authentication-2fa-fortify.html</guid><description>&lt;p&gt;Two-factor authentication (2FA) adds an extra layer of security to your Laravel application. Users need both their password and a time-based code from an authenticator app to log in. Laravel Fortify handles all the backend logic, and you build the frontend however you want.&lt;/p&gt;
&lt;p&gt;This guide walks through the complete setup: installing Fortify, enabling 2FA, generating QR codes for Google Authenticator, managing recovery codes, confirming codes before activation to prevent lockouts, and testing everything. We&amp;rsquo;ll also cover security practices and common problems you might run into.&lt;/p&gt;</description></item><item><title>Easy Background Processing Tutorial</title><link>https://www.buanacoding.com/2025/09/laravel-queue-jobs-background-processing-tutorial.html</link><pubDate>Wed, 24 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-queue-jobs-background-processing-tutorial.html</guid><description>&lt;p&gt;Ever had a user complain that your app takes forever to send an email or process an image upload? Or maybe you&amp;rsquo;ve watched your response times crawl to a halt because you&amp;rsquo;re trying to do too much work during a single request? Laravel queues are the solution you&amp;rsquo;ve been looking for, and they&amp;rsquo;re easier to set up than you might think.&lt;/p&gt;
&lt;p&gt;Think of Laravel queues as your app&amp;rsquo;s personal assistant. Instead of making users wait while you send emails, resize images, or generate reports, you hand these tasks off to the background and let users continue with their day. The work still gets done, but it doesn&amp;rsquo;t block the user experience.&lt;/p&gt;</description></item><item><title>Error Tracking Tools and Techniques</title><link>https://www.buanacoding.com/2025/09/laravel-production-monitoring-error-tracking.html</link><pubDate>Tue, 23 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-production-monitoring-error-tracking.html</guid><description>&lt;p&gt;Running a Laravel application in production without proper monitoring is like driving blindfolded - you won&amp;rsquo;t know there&amp;rsquo;s a problem until you crash. The moment your app goes live, dozens of things can go wrong: database connections can fail, APIs can timeout, memory can run out, or users might trigger unexpected errors you never saw during development.&lt;/p&gt;
&lt;p&gt;Good monitoring isn&amp;rsquo;t just about knowing when things break - it&amp;rsquo;s about catching issues before they affect users, understanding performance trends, and having the data you need to fix problems quickly. Whether you&amp;rsquo;re running a small business site or a high-traffic application, the right monitoring setup can save you countless sleepless nights and frustrated customer calls.&lt;/p&gt;</description></item><item><title>Boost Performance with High-Speed Application Server</title><link>https://www.buanacoding.com/2025/09/laravel-octane-boost-performance-tutorial.html</link><pubDate>Mon, 22 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-octane-boost-performance-tutorial.html</guid><description>&lt;p&gt;If you&amp;rsquo;re tired of waiting for your Laravel app to respond and want to see some serious speed improvements, Laravel Octane might be exactly what you&amp;rsquo;re looking for. Think of it as giving your application a turbo boost - we&amp;rsquo;re talking about performance gains that can make your app 3x to 10x faster in many scenarios.&lt;/p&gt;
&lt;p&gt;Laravel Octane takes your regular Laravel application and runs it on high-performance application servers like Swoole or RoadRunner. Instead of booting up your entire application for every single request (which is what traditional PHP does), Octane keeps your app loaded in memory and reuses it for multiple requests. The result? Lightning-fast response times that will make your users happy.&lt;/p&gt;</description></item><item><title>Laravel N+1 Query Problem Solution Essential Database Optimization Guide</title><link>https://www.buanacoding.com/2025/09/laravel-n-plus-one-query-problem-solution.html</link><pubDate>Mon, 22 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-n-plus-one-query-problem-solution.html</guid><description>&lt;p&gt;If you&amp;rsquo;ve ever wondered why your Laravel app suddenly becomes sluggish when displaying lists of data, you might be dealing with the dreaded N+1 query problem. It&amp;rsquo;s one of those sneaky performance killers that can turn a fast application into a slow, resource-hungry monster. Don&amp;rsquo;t worry though - once you understand what&amp;rsquo;s happening and how to fix it, you&amp;rsquo;ll never fall into this trap again.&lt;/p&gt;
&lt;h2 id="what-is-the-n1-query-problem"&gt;What is the N+1 Query Problem?&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s what happens: your app makes one query to get a list of records, then fires off a separate query for each record to grab related data. Picture this - you want to show 100 blog posts with their authors&amp;rsquo; names. Instead of being smart about it, your app runs one query to get the posts, then 100 more queries to fetch each author. That&amp;rsquo;s 101 database hits when you could&amp;rsquo;ve done it with just 2!&lt;/p&gt;</description></item><item><title>Breaking Monolith into Scalable Services</title><link>https://www.buanacoding.com/2025/09/laravel-microservices-breaking-monolith.html</link><pubDate>Sat, 20 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-microservices-breaking-monolith.html</guid><description>&lt;p&gt;As your Laravel application grows, you might find yourself hitting the limitations of a monolithic architecture. Database bottlenecks, deployment challenges, and team coordination issues become increasingly common. The solution? Transitioning to a microservices architecture that breaks your monolith into smaller, manageable, and independently deployable services.&lt;/p&gt;
&lt;p&gt;This comprehensive guide will walk you through the entire process of decomposing your Laravel monolith into microservices, from initial planning to practical implementation strategies.&lt;/p&gt;
&lt;h2 id="understanding-monolith-vs-microservices"&gt;Understanding Monolith vs Microservices&lt;/h2&gt;
&lt;p&gt;A monolithic application packages all functionality into a single deployable unit. While this approach works well for small to medium applications, it presents several challenges as your application scales:&lt;/p&gt;</description></item><item><title>Laravel Integration with React Vue Complete Inertia.js Guide for Modern SPA</title><link>https://www.buanacoding.com/2025/09/laravel-integration-react-vue-inertia.html</link><pubDate>Fri, 19 Sep 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-integration-react-vue-inertia.html</guid><description>&lt;p&gt;Inertia.js lets you build a single‑page app on top of Laravel without maintaining a separate API. You keep server‑side routing, controllers, middleware, and validation, while rendering pages with React or Vue. The result feels like an SPA—fast navigation, preserved state, and partial reloads—without the overhead of duplicating server logic.&lt;/p&gt;
&lt;p&gt;This guide walks through installation, page structure, forms, validation, shared data, server‑side rendering (optional), authentication with Sanctum, building assets with Vite, deployment, and fixes for the most common issues.&lt;/p&gt;</description></item><item><title>Modern API Tutorial for Complex Applications</title><link>https://www.buanacoding.com/2025/09/laravel-graphql-tutorial-api-modern.html</link><pubDate>Thu, 18 Sep 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-graphql-tutorial-api-modern.html</guid><description>&lt;p&gt;GraphQL shines when clients need flexible data shapes, fewer round trips, and typed contracts. For dashboards, mobile apps, or complex relationships, it can reduce API sprawl and speed up development. This tutorial uses Lighthouse, a mature GraphQL package for Laravel, and covers everything you need to go from a blank project to a production-ready API.&lt;/p&gt;
&lt;h2 id="why-graphql-and-when-not-to-use-it"&gt;Why GraphQL (and when not to use it)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use GraphQL when clients need to query exactly the fields they need, combine multiple resources in one request, or evolve contracts without versioning endpoints.&lt;/li&gt;
&lt;li&gt;Prefer REST for simple, cacheable resources or when infrastructure, team skills, and tools already fit REST neatly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="install-lighthouse"&gt;Install Lighthouse&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;composer require nuwave/lighthouse
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;php artisan vendor:publish --provider&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Nuwave\Lighthouse\LighthouseServiceProvider&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The publish step creates &lt;code&gt;graphql/schema.graphql&lt;/code&gt; and a config file. By default, the HTTP endpoint is &lt;code&gt;/graphql&lt;/code&gt; and the playground is enabled in non‑production environments.&lt;/p&gt;</description></item><item><title>Laravel File Upload with Validation and Security Best Practices</title><link>https://www.buanacoding.com/2025/09/laravel-file-upload-validation-security.html</link><pubDate>Wed, 17 Sep 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-file-upload-validation-security.html</guid><description>&lt;p&gt;File uploads are simple to build and easy to get wrong. The goal is to accept only what you expect, store files safely, and serve them without opening new risks. The checklist and examples below cover validation, storage, serving, limits, and common pitfalls.&lt;/p&gt;
&lt;h2 id="accept-only-what-you-need"&gt;Accept only what you need&lt;/h2&gt;
&lt;p&gt;Validate every request. If a feature requires only images, do not accept arbitrary files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// app/Http/Controllers/AvatarController.php
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nv"&gt;$validated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s1"&gt;&amp;#39;avatar&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s1"&gt;&amp;#39;required&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s1"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s1"&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// jpeg, png, bmp, gif, svg, webp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;max:2048&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// KB (2 MB)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mimetypes:image/jpeg,image/png,image/webp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// or: &amp;#39;mimes:jpeg,png,webp&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nv"&gt;$path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;avatar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;avatars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;avatar_path&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Avatar updated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notes&lt;/p&gt;</description></item><item><title>Development and Production Environment Setup</title><link>https://www.buanacoding.com/2025/09/laravel-docker-setup-development-production.html</link><pubDate>Tue, 16 Sep 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-docker-setup-development-production.html</guid><description>&lt;p&gt;Docker makes Laravel environments consistent across machines and stages. The steps below outline a clean setup for local development and a hardened build for production. Run PHP‑FPM behind Nginx, connect to MySQL/Postgres and Redis, toggle Xdebug when needed, and ship a small, cache‑friendly image.&lt;/p&gt;
&lt;h2 id="components"&gt;Components&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PHP‑FPM container for the application&lt;/li&gt;
&lt;li&gt;Nginx container as the HTTP entry point&lt;/li&gt;
&lt;li&gt;MySQL or Postgres, plus Redis&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;docker-compose.yml&lt;/code&gt; for development with bind mounts&lt;/li&gt;
&lt;li&gt;A multi‑stage Dockerfile for a compact production image&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="project-layout"&gt;Project layout&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;app/ # your Laravel app code
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker/
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; nginx/
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; default.conf
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Dockerfile
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker-compose.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="dockerfile-multistage"&gt;Dockerfile (multi‑stage)&lt;/h2&gt;
&lt;p&gt;Build dependencies once, then copy only what you need into the runtime image. Enable OPcache for production; allow an Xdebug toggle for local work.&lt;/p&gt;</description></item><item><title>Avoiding Fatal Mistakes</title><link>https://www.buanacoding.com/2025/09/laravel-database-migration-best-practices.html</link><pubDate>Mon, 15 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-database-migration-best-practices.html</guid><description>&lt;p&gt;Migrations let you evolve your schema alongside the code. Done well, they are repeatable and safe. Done poorly, they lock tables, drop data, and take your site down. This guide focuses on practical patterns that reduce risk in production and make rollouts predictable.&lt;/p&gt;
&lt;h2 id="ground-rules"&gt;Ground rules&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Treat migrations as immutable once deployed. If a mistake gets to production, add a new migration to correct it instead of editing history.&lt;/li&gt;
&lt;li&gt;Keep schema and data changes separate. Data backfills belong in their own migration or a job/command so you can control runtime and retries.&lt;/li&gt;
&lt;li&gt;Don’t rely on application models inside migrations. Models can drift as your app evolves. Prefer &lt;code&gt;DB::table()&lt;/code&gt; or raw SQL that doesn’t depend on future code.&lt;/li&gt;
&lt;li&gt;Test locally and in staging with the same DB engine and major version you run in production.&lt;/li&gt;
&lt;li&gt;Always run with &lt;code&gt;php artisan migrate --force&lt;/code&gt; in CI/production. Check status with &lt;code&gt;php artisan migrate:status&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="naming-and-versioning"&gt;Naming and versioning&lt;/h2&gt;
&lt;p&gt;Use descriptive names that read like a change log: &lt;code&gt;2025_09_15_100001_add_status_to_orders_table.php&lt;/code&gt;. One concern per migration. If a change requires several steps (add column → backfill → enforce NOT NULL), use separate migrations in the right order.&lt;/p&gt;</description></item><item><title>Laravel API Authentication with Sanctum Complete Tutorial 2025</title><link>https://www.buanacoding.com/2025/09/laravel-api-authentication-sanctum-2025.html</link><pubDate>Sun, 14 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-api-authentication-sanctum-2025.html</guid><description>&lt;p&gt;Laravel Sanctum offers two simple authentication modes that cover most applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cookie-based auth for SPAs that live on the same top-level domain as your backend.&lt;/li&gt;
&lt;li&gt;Personal access tokens for mobile apps, third‑party clients, or server‑to‑server use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial walks through both flows end‑to‑end, including the necessary configuration (CORS, cookies, stateful domains), how to issue and revoke tokens, how to protect routes, and how to test the result. You’ll also find production notes to avoid common pitfalls.&lt;/p&gt;</description></item><item><title>How to Fix Common Laravel Errors Complete Troubleshooting Guide for Developers</title><link>https://www.buanacoding.com/2025/09/how-to-fix-common-laravel-errors.html</link><pubDate>Sat, 13 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/how-to-fix-common-laravel-errors.html</guid><description>&lt;p&gt;Laravel applications fail for a handful of predictable reasons: missing or stale configuration, broken cache, database schema drift, misconfigured cookies, permissions, or plain coding mistakes. The sections below show fast, reliable ways to identify the root cause and ship a clean fix without guesswork.&lt;/p&gt;
&lt;h2 id="start-with-a-clean-baseline"&gt;Start with a clean baseline&lt;/h2&gt;
&lt;p&gt;Run these commands from the project root to eliminate stale build artifacts before you investigate further:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;php artisan cache:clear
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;php artisan config:clear
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;php artisan route:clear
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;php artisan view:clear
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;composer dump-autoload -o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the problem is related to file permissions (very common after deploy), follow the safe defaults in this companion article: &lt;a href="https://www.buanacoding.com/2025/09/fix-laravel-permission-issues-production.html"&gt;
 Fix Laravel Permission Issues
&lt;/a&gt;
.&lt;/p&gt;</description></item><item><title>Fixing Laravel Session and Cache Issues Complete Troubleshooting Guide</title><link>https://www.buanacoding.com/2025/09/fixing-laravel-session-cache-issues.html</link><pubDate>Fri, 12 Sep 2025 12:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/fixing-laravel-session-cache-issues.html</guid><description>&lt;p&gt;Sessions and cache power many core features in Laravel—from authentication to performance. When they break, symptoms can be confusing: users get logged out randomly, “remember me” does nothing, flash messages disappear, or recent cache writes don’t show up. Use the checklist below to quickly find and fix the cause.&lt;/p&gt;
&lt;h2 id="how-sessions-and-cache-fail"&gt;How sessions and cache fail&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sessions persist state across requests. Laravel can store them in files, database, Redis, Memcached, or array (for tests). If the storage can’t be written or the cookie can’t be read back, the user appears “logged out”.&lt;/li&gt;
&lt;li&gt;Cache stores computed data for speed. If the driver points to a different backend than you expect, or the key gets namespaced differently, you’ll read stale or missing values.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="quick-fixes-that-solve-most-cases"&gt;Quick fixes that solve most cases&lt;/h2&gt;
&lt;p&gt;Run these from your app root (adjust user/group):&lt;/p&gt;</description></item><item><title>Laravel Environment Configuration Fixing .env and Config Cache Issues</title><link>https://www.buanacoding.com/2025/09/laravel-environment-configuration-env-issues.html</link><pubDate>Fri, 12 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-environment-configuration-env-issues.html</guid><description>&lt;p&gt;Env problems often show up right after a deploy or a cache command: the app works locally but fails in production with “No application encryption key has been specified”, wrong database credentials, missing API keys, or stale config even after you edited &lt;code&gt;.env&lt;/code&gt;. This happens because of how Laravel loads environment variables and how config caching freezes values.&lt;/p&gt;
&lt;h2 id="how-laravel-reads-environment-variables"&gt;How Laravel reads environment variables&lt;/h2&gt;
&lt;p&gt;Laravel reads environment variables in two ways:&lt;/p&gt;</description></item><item><title>Fix Laravel Permission Issues Solving 403 and 500 Errors on Production Server</title><link>https://www.buanacoding.com/2025/09/fix-laravel-permission-issues-production.html</link><pubDate>Thu, 11 Sep 2025 08:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/fix-laravel-permission-issues-production.html</guid><description>&lt;p&gt;If a fresh deploy returns 403 or 500, the cause is usually predictable: wrong ownership/permissions, web server misconfig, missing PHP extensions, or SELinux. Use the checklist below to find and fix it quickly. Examples cover Ubuntu/Debian (Nginx/Apache with PHP‑FPM) and CentOS/RHEL (SELinux).&lt;/p&gt;
&lt;h2 id="why-403-vs-500"&gt;Why 403 vs 500&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;403 Forbidden from the web server: The server blocked access before Laravel ran. Common causes: wrong document root (not pointing to &lt;code&gt;public/&lt;/code&gt;), missing &lt;code&gt;try_files&lt;/code&gt;, directory or file not readable, SELinux contexts, or a security module (WAF/mod_security/Cloudflare) rejecting the request.&lt;/li&gt;
&lt;li&gt;403 from Laravel: Authorization middleware/policies, CSRF token failures, or custom gates deny the action.&lt;/li&gt;
&lt;li&gt;500 Internal Server Error: PHP crashed or threw an exception. Common causes: wrong permissions on &lt;code&gt;storage/&lt;/code&gt; or &lt;code&gt;bootstrap/cache&lt;/code&gt;, missing PHP extensions, invalid &lt;code&gt;.env&lt;/code&gt;, wrong &lt;code&gt;APP_KEY&lt;/code&gt;, or syntax/runtime errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="quick-fix-checklist-safe-defaults"&gt;Quick fix checklist (safe defaults)&lt;/h2&gt;
&lt;p&gt;Run these commands from your project root (adjust the PHP‑FPM user for your distro):&lt;/p&gt;</description></item><item><title>15 Essential Techniques for Fast Applications</title><link>https://www.buanacoding.com/2025/09/laravel-performance-optimization-15-techniques.html</link><pubDate>Mon, 08 Sep 2025 12:30:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-performance-optimization-15-techniques.html</guid><description>&lt;p&gt;Performance optimization is crucial for creating successful Laravel applications that provide excellent user experiences. Slow applications frustrate users, hurt SEO rankings, and can significantly impact business revenue. This comprehensive guide covers 15 proven techniques to dramatically improve your Laravel application&amp;rsquo;s performance.&lt;/p&gt;
&lt;p&gt;Modern web users expect applications to load quickly and respond instantly to interactions. Studies show that even a one-second delay in page load time can reduce conversions by 7%. Laravel provides powerful tools and features to help you build fast applications, but knowing how to use them effectively makes all the difference.&lt;/p&gt;</description></item><item><title>Complete Production Security Guide</title><link>https://www.buanacoding.com/2025/09/laravel-security-best-practices-production.html</link><pubDate>Mon, 08 Sep 2025 12:15:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-security-best-practices-production.html</guid><description>&lt;p&gt;Security is paramount when deploying Laravel applications to production environments. A single vulnerability can compromise user data, damage your reputation, and result in significant financial losses. This comprehensive guide covers essential security practices to protect your Laravel applications from common threats and vulnerabilities.&lt;/p&gt;
&lt;p&gt;Laravel provides excellent security features out of the box, but proper implementation and additional security measures are crucial for production deployments. From authentication and authorization to data protection and server hardening, every layer of your application stack requires careful attention to security details.&lt;/p&gt;</description></item><item><title>Clean Code Laravel Project Structure and Design Patterns Guide</title><link>https://www.buanacoding.com/2025/09/clean-code-laravel-project-structure.html</link><pubDate>Mon, 08 Sep 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/clean-code-laravel-project-structure.html</guid><description>&lt;p&gt;Writing clean, maintainable code in Laravel applications requires more than just understanding the framework&amp;rsquo;s features. It demands a systematic approach to organizing your project structure, implementing proven design patterns, and following established best practices that make your codebase scalable and readable.&lt;/p&gt;
&lt;p&gt;Laravel provides excellent flexibility, but this freedom can sometimes lead to messy codebases if developers don&amp;rsquo;t establish clear conventions early on. This comprehensive guide will walk you through proven strategies for creating professional Laravel applications that are easy to maintain, test, and scale.&lt;/p&gt;</description></item><item><title>Advanced Laravel Debugging with Logs Production Issues Troubleshooting</title><link>https://www.buanacoding.com/2025/09/advanced-laravel-debugging-with-logs.html</link><pubDate>Sat, 06 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/advanced-laravel-debugging-with-logs.html</guid><description>&lt;p&gt;When your Laravel application starts acting up in production, proper logging becomes your lifeline. Unlike development environments where you can use tools like dd() or dump(), production debugging requires a more sophisticated approach. This comprehensive guide walks you through advanced Laravel debugging techniques using logs that will help you identify, track, and resolve production issues efficiently.&lt;/p&gt;
&lt;h2 id="understanding-laravels-logging-architecture"&gt;Understanding Laravel&amp;rsquo;s Logging Architecture&lt;/h2&gt;
&lt;p&gt;Laravel provides a robust logging system built on top of the Monolog library. The framework offers multiple logging channels, each designed for specific use cases. Before diving into advanced debugging techniques, you need to understand how Laravel handles logging under the hood.&lt;/p&gt;</description></item><item><title>Deploy Laravel to VPS with Nginx Complete Production Guide</title><link>https://www.buanacoding.com/2025/08/deploy-laravel-to-vps-with-nginx-complete-guide.html</link><pubDate>Sun, 24 Aug 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/deploy-laravel-to-vps-with-nginx-complete-guide.html</guid><description>&lt;p&gt;Deploying a Laravel application to a VPS (Virtual Private Server) with Nginx gives you complete control over your hosting environment and superior performance compared to shared hosting. This comprehensive guide will walk you through the entire process, from server setup to production optimization.&lt;/p&gt;
&lt;h2 id="what-youll-learn"&gt;What You&amp;rsquo;ll Learn&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Set up a VPS for Laravel deployment&lt;/li&gt;
&lt;li&gt;Configure Nginx for optimal Laravel performance&lt;/li&gt;
&lt;li&gt;Secure your application with SSL certificates&lt;/li&gt;
&lt;li&gt;Implement production best practices&lt;/li&gt;
&lt;li&gt;Set up automated deployments&lt;/li&gt;
&lt;li&gt;Monitor and maintain your application&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before starting, ensure you have:&lt;/p&gt;</description></item><item><title>5 Laravel extensions that you must install on your Visual Studio Code</title><link>https://www.buanacoding.com/2024/04/5-laravel-extensions-that-you-must-install-on-your-visual-studio-code.html</link><pubDate>Sun, 21 Apr 2024 21:23:00 +0700</pubDate><guid>https://www.buanacoding.com/2024/04/5-laravel-extensions-that-you-must-install-on-your-visual-studio-code.html</guid><description>&lt;p&gt;If you&amp;rsquo;re just getting started with Laravel or even if you&amp;rsquo;ve been working with it for a while, using the right tools can make a big difference. Visual Studio Code (VS Code) is one of the most popular code editors among web developers, and thankfully, it has a great ecosystem of extensions that can help boost your productivity when working with Laravel.&lt;/p&gt;
&lt;p&gt;In this article, we&amp;rsquo;ll go through five essential VS Code extensions that you should install if you&amp;rsquo;re working with Laravel. These tools will help you write code faster, reduce bugs, and improve your workflow overall.&lt;/p&gt;</description></item><item><title>Belajar Membuat Aplikasi Pertama Anda dengan Laravel</title><link>https://www.buanacoding.com/2024/04/belajar-membuat-aplikasi-pertama-anda-dengan-laravel.html</link><pubDate>Fri, 19 Apr 2024 15:58:00 +0700</pubDate><guid>https://www.buanacoding.com/2024/04/belajar-membuat-aplikasi-pertama-anda-dengan-laravel.html</guid><description>&lt;p&gt;Ketika kita pertama kali melangkah ke dalam dunia pengembangan web, rasanya seperti memasuki sebuah labirin yang penuh dengan kode dan logika yang rumit. Namun, ada sesuatu yang menarik tentang proses belajar bagaimana segala sesuatu terhubung dan bekerja bersama untuk membentuk sebuah aplikasi web.&lt;/p&gt;
&lt;p&gt;Apakah Anda sedang mencari hobi baru atau ingin mengejar karier sebagai pengembang web, membangun aplikasi pertama Anda adalah pengalaman yang sangat berharga. Dengan memahami dasar-dasar pengembangan web, Anda akan memiliki dasar yang kuat untuk mempelajari teknologi-teknologi baru dan membangun aplikasi yang lebih kompleks di masa depan.&lt;/p&gt;</description></item><item><title>how to install and configure yajra datatable in Laravel</title><link>https://www.buanacoding.com/2023/08/how-to-install-and-configure-yajra.html</link><pubDate>Sun, 06 Aug 2023 00:13:00 +0700</pubDate><guid>https://www.buanacoding.com/2023/08/how-to-install-and-configure-yajra.html</guid><description>&lt;p&gt;In the realm of modern web development, providing a seamless user experience and enhancing the overall performance of your web applications is paramount. One essential aspect that plays a pivotal role in achieving these goals is efficient data presentation and manipulation. This is where Yajra DataTables comes into the picture.&lt;/p&gt;
&lt;p&gt;Yajra DataTables is a powerful and versatile jQuery-based plugin for Laravel, designed to simplify the process of displaying data in tabular form with advanced features such as filtering, sorting, pagination, and more. It empowers developers to create interactive and dynamic data tables effortlessly, significantly improving how data is showcased to end users.&lt;/p&gt;</description></item><item><title>Cara Menjalankan Project Laravel Clone dari GitHub</title><link>https://www.buanacoding.com/2023/04/cara-menjalankan-project-laravel-clone.html</link><pubDate>Sun, 09 Apr 2023 23:08:00 +0700</pubDate><guid>https://www.buanacoding.com/2023/04/cara-menjalankan-project-laravel-clone.html</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Dapat project Laravel dari GitHub tapi bingung cara jalankannya? Atau malah error melulu saat setup? Tenang, kamu tidak sendirian. Banyak developer pemula (bahkan yang udah agak senior) sering stuck di tahap ini.&lt;/p&gt;
&lt;p&gt;Clone project Laravel dari GitHub itu gampang kalau tau step-by-step yang benar. Tapi kalau asal comot dan langsung jalankan, siap-siap ketemu segudang error dari missing dependencies, database connection failed, sampai permission issues.&lt;/p&gt;</description></item></channel></rss>