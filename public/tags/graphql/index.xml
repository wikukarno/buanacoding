<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GraphQL on Buana Coding</title><link>https://www.buanacoding.com/tags/graphql/</link><description>Recent content in GraphQL on Buana Coding</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 26 Sep 2025 03:00:00 +0700</lastBuildDate><atom:link href="https://www.buanacoding.com/tags/graphql/index.xml" rel="self" type="application/rss+xml"/><item><title>Building GraphQL Server with gqlgen in Golang</title><link>https://www.buanacoding.com/2025/09/building-graphql-server-gqlgen-golang.html</link><pubDate>Fri, 26 Sep 2025 03:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/building-graphql-server-gqlgen-golang.html</guid><description>&lt;p&gt;Modern web applications require APIs that can efficiently serve data to various clients with different needs. While traditional REST APIs have served this purpose for years, GraphQL has emerged as a powerful alternative that solves many common API development challenges. When building GraphQL servers in Go, gqlgen stands out as the most mature and feature-rich library available.&lt;/p&gt;
&lt;p&gt;This comprehensive guide will walk you through building a complete GraphQL server using gqlgen, from initial setup to production deployment. We&amp;rsquo;ll cover schema design, resolver implementation, database integration, and performance optimization techniques that will help you build robust, scalable GraphQL APIs.&lt;/p&gt;</description></item><item><title>GraphQL with Golang - A Modern Alternative to REST API</title><link>https://www.buanacoding.com/2025/09/graphql-golang-modern-alternative-rest-api.html</link><pubDate>Fri, 26 Sep 2025 02:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/graphql-golang-modern-alternative-rest-api.html</guid><description>&lt;p&gt;The landscape of API development has evolved significantly over the past decade. While REST APIs have been the dominant architecture for building web services, GraphQL has emerged as a compelling alternative that addresses many limitations of traditional REST-based approaches. When combined with Go&amp;rsquo;s performance and simplicity, GraphQL creates a powerful foundation for modern API development.&lt;/p&gt;
&lt;h2 id="understanding-graphql-beyond-traditional-rest"&gt;Understanding GraphQL: Beyond Traditional REST&lt;/h2&gt;
&lt;p&gt;GraphQL represents a paradigm shift in how we think about API design and data fetching. Unlike REST, which exposes multiple endpoints for different resources, GraphQL provides a single endpoint that can handle complex queries with precise data requirements.&lt;/p&gt;</description></item><item><title>Modern API Tutorial for Complex Applications</title><link>https://www.buanacoding.com/2025/09/laravel-graphql-tutorial-api-modern.html</link><pubDate>Thu, 18 Sep 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-graphql-tutorial-api-modern.html</guid><description>&lt;p&gt;GraphQL shines when clients need flexible data shapes, fewer round trips, and typed contracts. For dashboards, mobile apps, or complex relationships, it can reduce API sprawl and speed up development. This tutorial uses Lighthouse, a mature GraphQL package for Laravel, and covers everything you need to go from a blank project to a production-ready API.&lt;/p&gt;
&lt;!--readmore--&gt;
&lt;h2 id="why-graphql-and-when-not-to-use-it"&gt;Why GraphQL (and when not to use it)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use GraphQL when clients need to query exactly the fields they need, combine multiple resources in one request, or evolve contracts without versioning endpoints.&lt;/li&gt;
&lt;li&gt;Prefer REST for simple, cacheable resources or when infrastructure, team skills, and tools already fit REST neatly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="install-lighthouse"&gt;Install Lighthouse&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;composer require nuwave/lighthouse
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;php artisan vendor:publish --provider&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Nuwave\Lighthouse\LighthouseServiceProvider&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The publish step creates &lt;code&gt;graphql/schema.graphql&lt;/code&gt; and a config file. By default, the HTTP endpoint is &lt;code&gt;/graphql&lt;/code&gt; and the playground is enabled in nonâ€‘production environments.&lt;/p&gt;</description></item></channel></rss>