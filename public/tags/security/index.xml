<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Buana Coding</title>
    <link>http://localhost:1313/tags/security/</link>
    <description>Recent content in Security on Buana Coding</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 17 Oct 2025 12:00:00 +0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Handle File Uploads in Go - Validation, Storage, and Security</title>
      <link>http://localhost:1313/2025/10/how-to-handle-file-uploads-in-go-validation-storage-and-security.html</link>
      <pubDate>Fri, 17 Oct 2025 12:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/10/how-to-handle-file-uploads-in-go-validation-storage-and-security.html</guid>
      <description>&lt;p&gt;File uploads seem simple until you deploy to production. Users upload 500MB videos that crash your server. Someone uploads a PHP file disguised as an image and compromises your system. Filenames with path traversal characters like &lt;code&gt;../../etc/passwd&lt;/code&gt; expose sensitive data. What started as a basic feature becomes a security nightmare.&lt;/p&gt;&#xA;&lt;p&gt;This guide demonstrates how to handle file uploads securely in Go applications. You&amp;rsquo;ll learn to parse multipart form data correctly, validate file types using magic number detection, enforce size limits that protect server resources, sanitize filenames to prevent attacks, store files securely with proper permissions, and implement production-ready patterns that scale.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Implement Session Management in Go - Cookies and Redis Tutorial</title>
      <link>http://localhost:1313/2025/10/how-to-implement-session-management-in-go-cookies-and-redis.html</link>
      <pubDate>Thu, 16 Oct 2025 09:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/10/how-to-implement-session-management-in-go-cookies-and-redis.html</guid>
      <description>&lt;p&gt;Web applications need to remember users across multiple requests. When a user logs in, adds items to a shopping cart, or sets preferences, the application must maintain this state throughout their session. HTTP&amp;rsquo;s stateless nature makes this challenging, but proper session management solves this problem by storing user state securely on the server while using cookies to track users across requests.&lt;/p&gt;&#xA;&lt;p&gt;This complete guide demonstrates how to implement production-ready session management in Go using cookies and Redis. You&amp;rsquo;ll learn to create secure sessions, store data efficiently in Redis, implement session middleware, handle authentication flows, prevent common security vulnerabilities, and build scalable session systems that work across multiple server instances.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Implement OAuth2 in Go Google GitHub and Facebook Login</title>
      <link>http://localhost:1313/2025/10/how-to-implement-oauth2-in-go-google-github-facebook-login.html</link>
      <pubDate>Sat, 04 Oct 2025 10:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/10/how-to-implement-oauth2-in-go-google-github-facebook-login.html</guid>
      <description>&lt;p&gt;Nobody wants to create yet another account with yet another password. I&amp;rsquo;ve built authentication systems that required users to sign up with email and password, and the drop-off rate was painful. Then I added &amp;ldquo;Login with Google&amp;rdquo; and conversions jumped 40%. Users already have accounts they trust - why make them create new ones?&lt;/p&gt;&#xA;&lt;p&gt;OAuth2 lets users authenticate with providers they already use - Google, GitHub, Facebook, whatever. You get verified emails, users don&amp;rsquo;t manage more passwords, and everyone&amp;rsquo;s happy. The best part? It&amp;rsquo;s not as complicated as it looks once you understand the flow.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Implement Rate Limiting in Go - Protect Your API from Abuse</title>
      <link>http://localhost:1313/2025/10/how-to-implement-rate-limiting-in-go-protect-api-from-abuse.html</link>
      <pubDate>Wed, 01 Oct 2025 10:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/10/how-to-implement-rate-limiting-in-go-protect-api-from-abuse.html</guid>
      <description>&lt;p&gt;APIs power modern applications by exposing functionality to clients, but unrestricted access creates vulnerabilities. A single misbehaving client can overwhelm your server, degrading performance for all users. Malicious actors can exploit unprotected endpoints to scrape data, attempt credential stuffing, or launch denial of service attacks. Rate limiting provides the first line of defense against these threats.&lt;/p&gt;&#xA;&lt;p&gt;This comprehensive guide demonstrates how to implement rate limiting in Go applications. You&amp;rsquo;ll learn multiple algorithms including token bucket and sliding window approaches, build middleware for automatic request throttling, implement per-IP and per-user limiting strategies, integrate Redis for distributed systems, and follow production best practices for protecting your APIs effectively.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Implement JWT Authentication in Go - Secure REST API Tutorial</title>
      <link>http://localhost:1313/2025/09/how-to-implement-jwt-authentication-in-go-secure-rest-api.html</link>
      <pubDate>Tue, 30 Sep 2025 09:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/09/how-to-implement-jwt-authentication-in-go-secure-rest-api.html</guid>
      <description>&lt;p&gt;Authentication sits at the foundation of any secure application. Whether you&amp;rsquo;re building a REST API, microservice, or full-stack web application, you need a reliable way to verify user identity and protect sensitive endpoints. JWT (JSON Web Token) has become the de facto standard for stateless authentication in modern applications, and Go provides excellent tools for implementing it correctly.&lt;/p&gt;&#xA;&lt;p&gt;This guide walks through implementing JWT authentication in Go from the ground up. You&amp;rsquo;ll learn how to generate tokens, validate them, handle refresh tokens, create authentication middleware, and follow security best practices that work in production environments. By the end, you&amp;rsquo;ll have a complete authentication system ready to integrate into your Go applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Laravel File Upload with Validation and Security Best Practices</title>
      <link>http://localhost:1313/2025/09/laravel-file-upload-validation-security.html</link>
      <pubDate>Wed, 17 Sep 2025 07:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/09/laravel-file-upload-validation-security.html</guid>
      <description>&lt;p&gt;File uploads are simple to build and easy to get wrong. The goal is to accept only what you expect, store files safely, and serve them without opening new risks. The checklist and examples below cover validation, storage, serving, limits, and common pitfalls.&lt;/p&gt;&#xA;&lt;h2 id=&#34;accept-only-what-you-need&#34;&gt;Accept only what you need&lt;/h2&gt;&#xA;&lt;p&gt;Validate every request. If a feature requires only images, do not accept arbitrary files.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// app/Http/Controllers/AvatarController.php&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;store&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$validated&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s1&#34;&gt;&amp;#39;avatar&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;s1&#34;&gt;&amp;#39;required&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;s1&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;s1&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;// jpeg, png, bmp, gif, svg, webp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;s1&#34;&gt;&amp;#39;max:2048&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;// KB (2 MB)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;s1&#34;&gt;&amp;#39;mimetypes:image/jpeg,image/png,image/webp&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;// or: &amp;#39;mimes:jpeg,png,webp&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;avatar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;store&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;avatars&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;auth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;avatar_path&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Avatar updated&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notes&lt;/p&gt;</description>
    </item>
    <item>
      <title>Complete Production Security Guide</title>
      <link>http://localhost:1313/2025/09/laravel-security-best-practices-production.html</link>
      <pubDate>Mon, 08 Sep 2025 12:15:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/09/laravel-security-best-practices-production.html</guid>
      <description>&lt;p&gt;Security is paramount when deploying Laravel applications to production environments. A single vulnerability can compromise user data, damage your reputation, and result in significant financial losses. This comprehensive guide covers essential security practices to protect your Laravel applications from common threats and vulnerabilities.&lt;/p&gt;&#xA;&lt;p&gt;Laravel provides excellent security features out of the box, but proper implementation and additional security measures are crucial for production deployments. From authentication and authorization to data protection and server hardening, every layer of your application stack requires careful attention to security details.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Are Passkeys? How to Enable Them on Google, Apple, and Password Managers (2025 Guide)</title>
      <link>http://localhost:1313/2025/08/what-are-passkeys-how-to-enable-google-apple-password-managers.html</link>
      <pubDate>Fri, 22 Aug 2025 10:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/08/what-are-passkeys-how-to-enable-google-apple-password-managers.html</guid>
      <description>&lt;p&gt;Passkeys are increasingly supported across major platforms. They enable fast, convenient logins without passwords and are resistant to phishing. No more weak passwords or OTP codes hijacked via SIM swaps. This guide explains how passkeys work, compares them with legacy 2FA, and shows how to enable them on Google and Apple or use them with password managers like 1Password and Bitwarden.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary-what-is-a-passkey&#34;&gt;Summary: What Is a Passkey?&lt;/h2&gt;&#xA;&lt;p&gt;A passkey is a passwordless credential based on FIDO2/WebAuthn. Instead of typing a shared secret, you prove possession of a private cryptographic key securely stored on your device (or in a compatible password manager). When you log in, the site/app sends a challenge that only your private key can sign. The server verifies the signature with the public key you registered. No shared secret travels over the network.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Phishing Signs, Fake Email Examples, and How to Avoid Them (2025 Guide)</title>
      <link>http://localhost:1313/2025/08/phishing-signs-fake-email-examples-how-to-avoid.html</link>
      <pubDate>Wed, 20 Aug 2025 00:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/08/phishing-signs-fake-email-examples-how-to-avoid.html</guid>
      <description>&lt;p&gt;Staying safe online is getting harder. Scammers use convincing emails, text messages, websites, and even mobile apps to trick people into giving away passwords, banking details, or installing malware. This plain-English guide explains the most common phishing signs, shows realistic (safe) examples, and gives you clear steps to protect yourself.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-phishing&#34;&gt;What Is Phishing?&lt;/h2&gt;&#xA;&lt;p&gt;Phishing is a social-engineering attack where criminals pretend to be a trusted brand, coworker, or service (bank, delivery company, marketplace, government agency) to make you click a link, open a file, or share sensitive information. Modern phishing blends good design with urgency (“Your account will be closed in 24 hours!”) so you act before thinking.&lt;/p&gt;</description>
    </item>
    <item>
      <title>FastAPI JWT Auth with OAuth2 Password Flow (Pydantic v2 &#43; SQLAlchemy 2.0)</title>
      <link>http://localhost:1313/2025/08/fastapi-jwt-auth-oauth2-password-flow-pydantic-v2-sqlalchemy-2.html</link>
      <pubDate>Wed, 20 Aug 2025 07:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/08/fastapi-jwt-auth-oauth2-password-flow-pydantic-v2-sqlalchemy-2.html</guid>
      <description>&lt;p&gt;Looking to add login to your FastAPI app without pulling in a full auth service? Here’s a small, production‑friendly setup. We’ll build username/password authentication with the OAuth2 Password flow and JSON Web Tokens (JWTs) for stateless access. It uses Pydantic v2 for validation and SQLAlchemy 2.0 for persistence. You’ll hash passwords properly, create/verify tokens, protect routes, and test everything end‑to‑end.&lt;/p&gt;&#xA;&lt;p&gt;If you’re deploying the finished app on Ubuntu with HTTPS, check the deployment guide: &lt;a href=&#34;http://localhost:1313/2025/08/deploy-fastapi-ubuntu-24-04-gunicorn-nginx-certbot.html&#34;&gt;&#xA;  Deploy FastAPI on Ubuntu 24.04: Gunicorn + Nginx + Certbot&#xA;&lt;/a&gt;&#xA;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stop Reusing Passwords A Practical Guide to Password Managers</title>
      <link>http://localhost:1313/2025/08/stop-reusing-passwords-practical-password-manager-guide.html</link>
      <pubDate>Mon, 18 Aug 2025 01:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/08/stop-reusing-passwords-practical-password-manager-guide.html</guid>
      <description>&lt;p&gt;If you reuse passwords, the internet is quietly stacking odds against you. One small site gets breached, your email and password leak, and attackers try the same combo on your email, banking, cloud storage—everywhere. That “I’ll remember it” system works right up until it doesn’t. The fix isn’t superhuman memory; it’s outsourcing the problem to a tool designed for it: a password manager.&lt;/p&gt;&#xA;&lt;p&gt;What a password manager actually does&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Generates strong, unique passwords for every account&lt;/li&gt;&#xA;&lt;li&gt;Stores them encrypted, synced across your devices&lt;/li&gt;&#xA;&lt;li&gt;Auto‑fills only on the correct websites/apps&lt;/li&gt;&#xA;&lt;li&gt;Audits your vault for weak/reused/compromised passwords&lt;/li&gt;&#xA;&lt;li&gt;Holds secure notes, TOTP codes (in some apps), and sometimes passkeys&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The goal is simple: every account gets its own high‑entropy secret, and you never type or remember it again.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
