<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Eloquent on Buana Coding</title><link>https://www.buanacoding.com/tags/eloquent/</link><description>Recent content in Eloquent on Buana Coding</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 22 Dec 2024 07:00:00 +0000</lastBuildDate><atom:link href="https://www.buanacoding.com/tags/eloquent/index.xml" rel="self" type="application/rss+xml"/><item><title>Laravel N+1 Query Problem Solution: Essential Database Optimization Guide</title><link>https://www.buanacoding.com/blog/laravel/laravel-n-plus-one-query-problem-solution/</link><pubDate>Sun, 22 Dec 2024 07:00:00 +0000</pubDate><guid>https://www.buanacoding.com/blog/laravel/laravel-n-plus-one-query-problem-solution/</guid><description>&lt;p&gt;If you&amp;rsquo;ve ever wondered why your Laravel app suddenly becomes sluggish when displaying lists of data, you might be dealing with the dreaded N+1 query problem. It&amp;rsquo;s one of those sneaky performance killers that can turn a fast application into a slow, resource-hungry monster. Don&amp;rsquo;t worry though - once you understand what&amp;rsquo;s happening and how to fix it, you&amp;rsquo;ll never fall into this trap again.&lt;/p&gt;
&lt;h2 id="what-is-the-n1-query-problem"&gt;What is the N+1 Query Problem?&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s what happens: your app makes one query to get a list of records, then fires off a separate query for each record to grab related data. Picture this - you want to show 100 blog posts with their authors&amp;rsquo; names. Instead of being smart about it, your app runs one query to get the posts, then 100 more queries to fetch each author. That&amp;rsquo;s 101 database hits when you could&amp;rsquo;ve done it with just 2!&lt;/p&gt;</description></item></channel></rss>