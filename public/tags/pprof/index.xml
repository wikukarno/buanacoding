<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pprof on Buana Coding</title>
    <link>http://localhost:1313/tags/pprof/</link>
    <description>Recent content in Pprof on Buana Coding</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 06 Oct 2025 10:00:00 +0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/pprof/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Profile and Optimize Go Applications with pprof</title>
      <link>http://localhost:1313/2025/10/how-to-profile-and-optimize-go-applications-with-pprof.html</link>
      <pubDate>Mon, 06 Oct 2025 10:00:00 +0700</pubDate>
      <guid>http://localhost:1313/2025/10/how-to-profile-and-optimize-go-applications-with-pprof.html</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;Your Go application is slow. Requests take too long, memory usage keeps climbing, or CPU maxes out under load. You need answers, not guesses. That&amp;rsquo;s where pprof comes in.&lt;/p&gt;&#xA;&lt;p&gt;pprof is Go&amp;rsquo;s built-in profiler that shows you exactly what&amp;rsquo;s happening inside your running application. It tells you which functions eat CPU cycles, which code paths allocate tons of memory, where goroutines get stuck, and what&amp;rsquo;s blocking your program. With this data, you stop guessing and start fixing real bottlenecks.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
