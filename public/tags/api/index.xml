<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API on Buana Coding</title><link>https://www.buanacoding.com/tags/api/</link><description>Recent content in API on Buana Coding</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 22 Oct 2025 12:00:00 +0700</lastBuildDate><atom:link href="https://www.buanacoding.com/tags/api/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Create RESTful API Pagination and Filtering in Laravel</title><link>https://www.buanacoding.com/2025/10/how-to-create-restful-api-pagination-filtering-sorting-laravel.html</link><pubDate>Wed, 22 Oct 2025 12:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/10/how-to-create-restful-api-pagination-filtering-sorting-laravel.html</guid><description>&lt;p&gt;A good API lets clients filter, sort, and paginate through data. Nobody wants to download 10,000 records just to find a few items. This guide shows you how to add pagination, filtering, sorting, and search to your Laravel REST API.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll learn Laravel&amp;rsquo;s built-in pagination methods, how to add query parameters for filters and sorting, search across multiple columns, cursor pagination for large datasets, and API resources for formatting responses. We&amp;rsquo;ll also cover performance tips and common mistakes.&lt;/p&gt;</description></item><item><title>Building GraphQL Server with gqlgen in Golang</title><link>https://www.buanacoding.com/2025/09/building-graphql-server-gqlgen-golang.html</link><pubDate>Fri, 26 Sep 2025 03:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/building-graphql-server-gqlgen-golang.html</guid><description>&lt;p&gt;Modern web applications require APIs that can efficiently serve data to various clients with different needs. While traditional REST APIs have served this purpose for years, GraphQL has emerged as a powerful alternative that solves many common API development challenges. When building GraphQL servers in Go, gqlgen stands out as the most mature and feature-rich library available.&lt;/p&gt;
&lt;p&gt;This comprehensive guide will walk you through building a complete GraphQL server using gqlgen, from initial setup to production deployment. We&amp;rsquo;ll cover schema design, resolver implementation, database integration, and performance optimization techniques that will help you build robust, scalable GraphQL APIs.&lt;/p&gt;</description></item><item><title>GraphQL with Golang - A Modern Alternative to REST API</title><link>https://www.buanacoding.com/2025/09/graphql-golang-modern-alternative-rest-api.html</link><pubDate>Fri, 26 Sep 2025 02:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/graphql-golang-modern-alternative-rest-api.html</guid><description>&lt;p&gt;The landscape of API development has evolved significantly over the past decade. While REST APIs have been the dominant architecture for building web services, GraphQL has emerged as a compelling alternative that addresses many limitations of traditional REST-based approaches. When combined with Go&amp;rsquo;s performance and simplicity, GraphQL creates a powerful foundation for modern API development.&lt;/p&gt;
&lt;h2 id="understanding-graphql-beyond-traditional-rest"&gt;Understanding GraphQL: Beyond Traditional REST&lt;/h2&gt;
&lt;p&gt;GraphQL represents a paradigm shift in how we think about API design and data fetching. Unlike REST, which exposes multiple endpoints for different resources, GraphQL provides a single endpoint that can handle complex queries with precise data requirements.&lt;/p&gt;</description></item><item><title>Breaking Monolith into Scalable Services</title><link>https://www.buanacoding.com/2025/09/laravel-microservices-breaking-monolith.html</link><pubDate>Sat, 20 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-microservices-breaking-monolith.html</guid><description>&lt;p&gt;As your Laravel application grows, you might find yourself hitting the limitations of a monolithic architecture. Database bottlenecks, deployment challenges, and team coordination issues become increasingly common. The solution? Transitioning to a microservices architecture that breaks your monolith into smaller, manageable, and independently deployable services.&lt;/p&gt;
&lt;p&gt;This comprehensive guide will walk you through the entire process of decomposing your Laravel monolith into microservices, from initial planning to practical implementation strategies.&lt;/p&gt;
&lt;h2 id="understanding-monolith-vs-microservices"&gt;Understanding Monolith vs Microservices&lt;/h2&gt;
&lt;p&gt;A monolithic application packages all functionality into a single deployable unit. While this approach works well for small to medium applications, it presents several challenges as your application scales:&lt;/p&gt;</description></item><item><title>Modern API Tutorial for Complex Applications</title><link>https://www.buanacoding.com/2025/09/laravel-graphql-tutorial-api-modern.html</link><pubDate>Thu, 18 Sep 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-graphql-tutorial-api-modern.html</guid><description>&lt;p&gt;GraphQL shines when clients need flexible data shapes, fewer round trips, and typed contracts. For dashboards, mobile apps, or complex relationships, it can reduce API sprawl and speed up development. This tutorial uses Lighthouse, a mature GraphQL package for Laravel, and covers everything you need to go from a blank project to a production-ready API.&lt;/p&gt;
&lt;!--readmore--&gt;
&lt;h2 id="why-graphql-and-when-not-to-use-it"&gt;Why GraphQL (and when not to use it)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use GraphQL when clients need to query exactly the fields they need, combine multiple resources in one request, or evolve contracts without versioning endpoints.&lt;/li&gt;
&lt;li&gt;Prefer REST for simple, cacheable resources or when infrastructure, team skills, and tools already fit REST neatly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="install-lighthouse"&gt;Install Lighthouse&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;composer require nuwave/lighthouse
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;php artisan vendor:publish --provider&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Nuwave\Lighthouse\LighthouseServiceProvider&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The publish step creates &lt;code&gt;graphql/schema.graphql&lt;/code&gt; and a config file. By default, the HTTP endpoint is &lt;code&gt;/graphql&lt;/code&gt; and the playground is enabled in non‑production environments.&lt;/p&gt;</description></item><item><title>Laravel API Authentication with Sanctum Complete Tutorial 2025</title><link>https://www.buanacoding.com/2025/09/laravel-api-authentication-sanctum-2025.html</link><pubDate>Sun, 14 Sep 2025 10:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/laravel-api-authentication-sanctum-2025.html</guid><description>&lt;p&gt;Laravel Sanctum offers two simple authentication modes that cover most applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cookie-based auth for SPAs that live on the same top-level domain as your backend.&lt;/li&gt;
&lt;li&gt;Personal access tokens for mobile apps, third‑party clients, or server‑to‑server use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial walks through both flows end‑to‑end, including the necessary configuration (CORS, cookies, stateful domains), how to issue and revoke tokens, how to protect routes, and how to test the result. You’ll also find production notes to avoid common pitfalls.&lt;/p&gt;</description></item></channel></rss>