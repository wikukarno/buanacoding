<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JWT on Buana Coding</title><link>https://www.buanacoding.com/tags/jwt/</link><description>Recent content in JWT on Buana Coding</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 30 Sep 2025 09:00:00 +0700</lastBuildDate><atom:link href="https://www.buanacoding.com/tags/jwt/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Implement JWT Authentication in Go - Secure REST API Tutorial</title><link>https://www.buanacoding.com/2025/09/how-to-implement-jwt-authentication-in-go-secure-rest-api.html</link><pubDate>Tue, 30 Sep 2025 09:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/09/how-to-implement-jwt-authentication-in-go-secure-rest-api.html</guid><description>&lt;p&gt;Authentication sits at the foundation of any secure application. Whether you&amp;rsquo;re building a REST API, microservice, or full-stack web application, you need a reliable way to verify user identity and protect sensitive endpoints. JWT (JSON Web Token) has become the de facto standard for stateless authentication in modern applications, and Go provides excellent tools for implementing it correctly.&lt;/p&gt;
&lt;p&gt;This guide walks through implementing JWT authentication in Go from the ground up. You&amp;rsquo;ll learn how to generate tokens, validate them, handle refresh tokens, create authentication middleware, and follow security best practices that work in production environments. By the end, you&amp;rsquo;ll have a complete authentication system ready to integrate into your Go applications.&lt;/p&gt;</description></item><item><title>FastAPI JWT Auth with OAuth2 Password Flow (Pydantic v2 + SQLAlchemy 2.0)</title><link>https://www.buanacoding.com/2025/08/fastapi-jwt-auth-oauth2-password-flow-pydantic-v2-sqlalchemy-2.html</link><pubDate>Wed, 20 Aug 2025 07:00:00 +0700</pubDate><guid>https://www.buanacoding.com/2025/08/fastapi-jwt-auth-oauth2-password-flow-pydantic-v2-sqlalchemy-2.html</guid><description>&lt;p&gt;Looking to add login to your FastAPI app without pulling in a full auth service? Here’s a small, production‑friendly setup. We’ll build username/password authentication with the OAuth2 Password flow and JSON Web Tokens (JWTs) for stateless access. It uses Pydantic v2 for validation and SQLAlchemy 2.0 for persistence. You’ll hash passwords properly, create/verify tokens, protect routes, and test everything end‑to‑end.&lt;/p&gt;
&lt;p&gt;If you’re deploying the finished app on Ubuntu with HTTPS, check the deployment guide: &lt;a href="https://www.buanacoding.com/2025/08/deploy-fastapi-ubuntu-24-04-gunicorn-nginx-certbot.html"&gt;
 Deploy FastAPI on Ubuntu 24.04: Gunicorn + Nginx + Certbot
&lt;/a&gt;
.&lt;/p&gt;</description></item></channel></rss>